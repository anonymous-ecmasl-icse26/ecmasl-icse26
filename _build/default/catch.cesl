function buildAST (___internal_esl_global) {
__n0 := {  };
__n0["type"] := "Program";
__n0["sourceType"] := "script";
__n2 := {  };
__n2["type"] := "ExpressionStatement";
__n3 := {  };
__n3["type"] := "Identifier";
__n3["name"] := "foo";
__n2["expression"] := __n3;
__n4 := {  };
__n4["type"] := "VariableDeclaration";
__n6 := {  };
__n6["type"] := "VariableDeclarator";
__n7 := {  };
__n7["type"] := "Identifier";
__n7["name"] := "func";
__n6["id"] := __n7;
__n8 := {  };
__n8["type"] := "CallExpression";
__n9 := {  };
__n9["type"] := "Identifier";
__n9["name"] := "foo";
__n8["callee"] := __n9;
__n8["is_tail_call"] := 'undefined;
__n11 := {  };
__n11["type"] := "Literal";
__n11["value"] := 10.;
__n11["raw"] := "10";
__n10 := [ __n11 ];
__n8["arguments"] := __n10;
__n6["init"] := __n8;
__n5 := [ __n6 ];
__n4["declarations"] := __n5;
__n4["kind"] := "let";
__n12 := {  };
__n12["type"] := "VariableDeclaration";
__n14 := {  };
__n14["type"] := "VariableDeclarator";
__n15 := {  };
__n15["type"] := "Identifier";
__n15["name"] := "ret";
__n14["id"] := __n15;
__n16 := {  };
__n16["type"] := "UnaryExpression";
__n16["operator"] := "-";
__n17 := {  };
__n17["type"] := "Literal";
__n17["value"] := 1.;
__n17["raw"] := "1";
__n16["argument"] := __n17;
__n16["prefix"] := true;
__n14["init"] := __n16;
__n13 := [ __n14 ];
__n12["declarations"] := __n13;
__n12["kind"] := "let";
__n18 := {  };
__n18["type"] := "TryStatement";
__n19 := {  };
__n19["type"] := "BlockStatement";
__n21 := {  };
__n21["type"] := "ExpressionStatement";
__n22 := {  };
__n22["type"] := "CallExpression";
__n23 := {  };
__n23["type"] := "MemberExpression";
__n23["computed"] := true;
__n24 := {  };
__n24["type"] := "Identifier";
__n24["name"] := "console";
__n23["object"] := __n24;
__n25 := {  };
__n25["type"] := "Literal";
__n25["value"] := "log";
__n25["raw"] := "\"log\"";
__n23["property"] := __n25;
__n22["callee"] := __n23;
__n22["is_tail_call"] := 'undefined;
__n27 := {  };
__n27["type"] := "Literal";
__n27["value"] := "Function 'foo' called";
__n27["raw"] := "\"Function 'foo' called\"";
__n26 := [ __n27 ];
__n22["arguments"] := __n26;
__n21["expression"] := __n22;
__n28 := {  };
__n28["type"] := "ExpressionStatement";
__n29 := {  };
__n29["type"] := "AssignmentExpression";
__n29["operator"] := "=";
__n30 := {  };
__n30["type"] := "Identifier";
__n30["name"] := "ret";
__n29["left"] := __n30;
__n31 := {  };
__n31["type"] := "CallExpression";
__n32 := {  };
__n32["type"] := "Identifier";
__n32["name"] := "func";
__n31["callee"] := __n32;
__n31["is_tail_call"] := 'undefined;
__n33 := [  ];
__n31["arguments"] := __n33;
__n29["right"] := __n31;
__n28["expression"] := __n29;
__n20 := [ __n21, __n28 ];
__n19["body"] := __n20;
__n34 := [  ];
__n19["letDeclarations"] := __n34;
__n35 := [  ];
__n19["constDeclarations"] := __n35;
__n18["block"] := __n19;
__n36 := {  };
__n36["type"] := "CatchClause";
__n37 := {  };
__n37["type"] := "Identifier";
__n37["name"] := "e";
__n36["param"] := __n37;
__n38 := {  };
__n38["type"] := "BlockStatement";
__n40 := {  };
__n40["type"] := "ExpressionStatement";
__n41 := {  };
__n41["type"] := "CallExpression";
__n42 := {  };
__n42["type"] := "MemberExpression";
__n42["computed"] := true;
__n43 := {  };
__n43["type"] := "Identifier";
__n43["name"] := "console";
__n42["object"] := __n43;
__n44 := {  };
__n44["type"] := "Literal";
__n44["value"] := "log";
__n44["raw"] := "\"log\"";
__n42["property"] := __n44;
__n41["callee"] := __n42;
__n41["is_tail_call"] := 'undefined;
__n46 := {  };
__n46["type"] := "BinaryExpression";
__n46["operator"] := "+";
__n47 := {  };
__n47["type"] := "Literal";
__n47["value"] := "Exception caught: ";
__n47["raw"] := "\"Exception caught: \"";
__n46["left"] := __n47;
__n48 := {  };
__n48["type"] := "Identifier";
__n48["name"] := "e";
__n46["right"] := __n48;
__n45 := [ __n46 ];
__n41["arguments"] := __n45;
__n40["expression"] := __n41;
__n49 := {  };
__n49["type"] := "ExpressionStatement";
__n50 := {  };
__n50["type"] := "AssignmentExpression";
__n50["operator"] := "=";
__n51 := {  };
__n51["type"] := "Identifier";
__n51["name"] := "ret";
__n50["left"] := __n51;
__n52 := {  };
__n52["type"] := "BinaryExpression";
__n52["operator"] := "+";
__n53 := {  };
__n53["type"] := "Identifier";
__n53["name"] := "e";
__n52["left"] := __n53;
__n54 := {  };
__n54["type"] := "Literal";
__n54["value"] := 10.;
__n54["raw"] := "10";
__n52["right"] := __n54;
__n50["right"] := __n52;
__n49["expression"] := __n50;
__n39 := [ __n40, __n49 ];
__n38["body"] := __n39;
__n55 := [  ];
__n38["letDeclarations"] := __n55;
__n56 := [  ];
__n38["constDeclarations"] := __n56;
__n36["body"] := __n38;
__n57 := [ "e" ];
__n36["paramsNames"] := __n57;
__n18["handler"] := __n36;
__n18["finalizer"] := null;
__n58 := {  };
__n58["type"] := "ExpressionStatement";
__n59 := {  };
__n59["type"] := "CallExpression";
__n60 := {  };
__n60["type"] := "MemberExpression";
__n60["computed"] := true;
__n61 := {  };
__n61["type"] := "Identifier";
__n61["name"] := "console";
__n60["object"] := __n61;
__n62 := {  };
__n62["type"] := "Literal";
__n62["value"] := "log";
__n62["raw"] := "\"log\"";
__n60["property"] := __n62;
__n59["callee"] := __n60;
__n59["is_tail_call"] := 'undefined;
__n64 := {  };
__n64["type"] := "BinaryExpression";
__n64["operator"] := "+";
__n65 := {  };
__n65["type"] := "Literal";
__n65["value"] := "Ret: ";
__n65["raw"] := "\"Ret: \"";
__n64["left"] := __n65;
__n66 := {  };
__n66["type"] := "Identifier";
__n66["name"] := "ret";
__n64["right"] := __n66;
__n63 := [ __n64 ];
__n59["arguments"] := __n63;
__n58["expression"] := __n59;
__n67 := {  };
__n67["type"] := "ExpressionStatement";
__n68 := {  };
__n68["type"] := "CallExpression";
__n69 := {  };
__n69["type"] := "Identifier";
__n69["name"] := "AssertEquals";
__n68["callee"] := __n69;
__n68["is_tail_call"] := 'undefined;
__n71 := {  };
__n71["type"] := "Identifier";
__n71["name"] := "ret";
__n72 := {  };
__n72["type"] := "Literal";
__n72["value"] := 30.;
__n72["raw"] := "30";
__n70 := [ __n71, __n72 ];
__n68["arguments"] := __n70;
__n67["expression"] := __n68;
__n1 := [ __n2, __n4, __n12, __n18, __n58, __n67 ];
__n0["body"] := __n1;
__n73 := [  ];
__n0["variableDeclarations"] := __n73;
__n75 := {  };
__n75["type"] := "FunctionDeclaration";
__n76 := {  };
__n76["type"] := "Identifier";
__n76["name"] := "foo";
__n75["id"] := __n76;
__n77 := [ "x" ];
__n75["params"] := __n77;
__n78 := {  };
__n78["type"] := "BlockStatement";
__n80 := {  };
__n80["type"] := "VariableDeclaration";
__n82 := {  };
__n82["type"] := "VariableDeclarator";
__n83 := {  };
__n83["type"] := "Identifier";
__n83["name"] := "value";
__n82["id"] := __n83;
__n84 := {  };
__n84["type"] := "Identifier";
__n84["name"] := "x";
__n82["init"] := __n84;
__n81 := [ __n82 ];
__n80["declarations"] := __n81;
__n80["kind"] := "let";
__n85 := {  };
__n85["type"] := "ReturnStatement";
__n86 := {  };
__n86["type"] := "ArrowFunctionExpression";
__n86["id"] := null;
__n87 := [  ];
__n86["params"] := __n87;
__n88 := {  };
__n88["type"] := "BlockStatement";
__n90 := {  };
__n90["type"] := "ThrowStatement";
__n91 := {  };
__n91["type"] := "BinaryExpression";
__n91["operator"] := "+";
__n92 := {  };
__n92["type"] := "Identifier";
__n92["name"] := "value";
__n91["left"] := __n92;
__n93 := {  };
__n93["type"] := "Literal";
__n93["value"] := 10.;
__n93["raw"] := "10";
__n91["right"] := __n93;
__n90["argument"] := __n91;
__n89 := [ __n90 ];
__n88["body"] := __n89;
__n88["isSimpleParameterList"] := true;
__n94 := [  ];
__n88["variableDeclarations"] := __n94;
__n95 := [  ];
__n88["functionDeclarations"] := __n95;
__n96 := [  ];
__n88["letDeclarations"] := __n96;
__n97 := [  ];
__n88["constDeclarations"] := __n97;
__n88["containsExpression"] := false;
__n98 := [  ];
__n88["paramsDetails"] := __n98;
__n99 := [  ];
__n88["paramsNames"] := __n99;
__n88["codeType"] := "function";
__n88["strict"] := false;
__n86["body"] := __n88;
__n86["generator"] := false;
__n86["async"] := false;
__n86["expression"] := false;
__n85["argument"] := __n86;
__n79 := [ __n80, __n85 ];
__n78["body"] := __n79;
__n78["isSimpleParameterList"] := true;
__n100 := [  ];
__n78["variableDeclarations"] := __n100;
__n101 := [  ];
__n78["functionDeclarations"] := __n101;
__n102 := [ "value" ];
__n78["letDeclarations"] := __n102;
__n103 := [  ];
__n78["constDeclarations"] := __n103;
__n78["containsExpression"] := false;
__n105 := {  };
__n105["type"] := "Identifier";
__n105["name"] := "x";
__n104 := [ __n105 ];
__n78["paramsDetails"] := __n104;
__n106 := [ "x" ];
__n78["paramsNames"] := __n106;
__n78["codeType"] := "function";
__n78["strict"] := false;
__n75["body"] := __n78;
__n75["generator"] := false;
__n75["async"] := false;
__n75["expression"] := false;
__n74 := [ __n75 ];
__n0["functionDeclarations"] := __n74;
__n107 := [ "func", "ret" ];
__n0["letDeclarations"] := __n107;
__n108 := [  ];
__n0["constDeclarations"] := __n108;
__n0["codeType"] := "global";
__n0["strict"] := false;
return [ false, __n0 ]
}