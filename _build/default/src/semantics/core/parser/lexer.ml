# 3 "src/semantics/core/parser/lexer.mll"
 
  open Lexing
  open Parser

  let keywords = Hashtbl.of_seq @@ List.to_seq
          [
            (* Language values *)
            "null"                    , NULL;

            (* Language constructs *)
            "function"                , FUNCTION;
            "print"                   , PRINT;
            "return"                  , RETURN;
            "delete"                  , DELETE;
            "extern"                  , EXTERN;
            "assert"                  , ASSERT;
            "fail"                    , FAIL;
            "if"                      , IF;
            "else"                    , ELSE;
            "while"                   , WHILE;
            "switch"                  , SWITCH;
            "case"                    , CASE;
            "default"                 , DEFAULT;

            (* List operators *)
            "hd"                      , LIST_HEAD;
            "tl"                      , LIST_TAIL;

            (* Type operators *)
            "typeof"                  , TYPEOF;
            "int_to_float"            , INT_TO_FLOAT;
            "int_to_string"           , INT_TO_STRING;
            "float_to_int"            , FLOAT_TO_INT;
            "float_to_string"         , FLOAT_TO_STRING;
            "string_to_int"           , STRING_TO_INT;
            "string_to_float"         , STRING_TO_FLOAT;

            (* Object operators *)
            "obj_to_list"             , OBJECT_TO_LIST;
            "obj_fields"              , OBJECT_FIELDS;
            "in_obj"                  , OBJECT_MEM;
          ]

  exception Syntax_error of string

  let create_string (lexbuf : Lexing.lexbuf) (read_string : Lexing.lexbuf -> token): token = 
    let start_p = lexbuf.lex_start_p in
    let token = read_string lexbuf in
    lexbuf.lex_start_p <- start_p;
    token

  let create_syntax_error ?(eof=false) (msg : string) (lexbuf : Lexing.lexbuf) : exn =
    let c = Lexing.lexeme lexbuf in
    let formatted_msg = (
      match eof with
      | true  -> Printf.sprintf "%s. Line number: %d." msg (lexbuf.lex_curr_p.pos_lnum)
      | false -> Printf.sprintf "%s: %s. Line number: %d." msg c (lexbuf.lex_curr_p.pos_lnum)
    ) in (Syntax_error formatted_msg)

# 62 "src/semantics/core/parser/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\209\255\210\255\082\000\192\000\020\001\104\001\188\001\
    \016\002\091\002\113\002\218\255\031\000\067\000\080\000\230\255\
    \018\000\058\000\233\255\235\255\131\000\101\000\157\000\239\255\
    \083\000\241\255\242\255\243\255\244\255\245\255\246\255\247\255\
    \248\255\249\255\084\000\252\255\253\255\254\255\001\000\206\000\
    \250\255\223\255\168\000\234\255\211\255\212\255\226\255\225\255\
    \220\255\229\255\219\255\084\000\227\255\224\255\145\002\155\002\
    \101\002\123\002\177\002\187\002\197\002\135\000\216\002\044\003\
    \128\003\212\003\040\004\124\004\208\004\036\005\120\005\195\005\
    \205\005\224\005\136\000\196\000\241\255\187\002\057\006\255\255\
    \044\006\246\255\247\255\248\255\067\006\250\255\251\255\252\255\
    \253\255\254\255\077\006\084\000\087\006\128\006\138\006\244\255\
    \185\001\254\255\255\255\002\000\187\001\252\255\253\255\254\255\
    \004\000\179\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\045\000\041\000\041\000\041\000\041\000\
    \041\000\039\000\038\000\255\255\045\000\034\000\033\000\255\255\
    \024\000\023\000\255\255\255\255\019\000\018\000\017\000\255\255\
    \015\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\004\000\255\255\255\255\255\255\001\000\000\000\
    \255\255\255\255\038\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\027\000\255\255\255\255\255\255\039\000\
    \039\000\255\255\255\255\039\000\255\255\041\000\041\000\039\000\
    \041\000\041\000\041\000\040\000\041\000\041\000\041\000\042\000\
    \255\255\042\000\042\000\255\255\255\255\012\000\013\000\255\255\
    \255\255\255\255\255\255\255\255\006\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\010\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \001\000\002\000\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\077\000\000\000\077\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \097\000\000\000\000\000\255\255\102\000\000\000\000\000\000\000\
    \255\255\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\039\000\037\000\037\000\098\000\038\000\103\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \039\000\024\000\011\000\032\000\000\000\019\000\017\000\003\000\
    \031\000\030\000\021\000\023\000\036\000\022\000\009\000\020\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\034\000\035\000\014\000\012\000\013\000\025\000\
    \033\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\027\000\053\000\026\000\015\000\004\000\
    \046\000\004\000\004\000\004\000\004\000\004\000\005\000\004\000\
    \004\000\007\000\004\000\004\000\004\000\004\000\008\000\004\000\
    \004\000\004\000\004\000\004\000\006\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\029\000\016\000\028\000\018\000\072\000\
    \050\000\051\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\049\000\048\000\047\000\043\000\
    \041\000\040\000\052\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\044\000\061\000\074\000\
    \092\000\073\000\045\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\039\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\106\000\000\000\000\000\000\000\079\000\061\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\004\000\
    \078\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\061\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\068\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\061\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\098\000\076\000\103\000\099\000\004\000\
    \104\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\065\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\061\000\000\000\105\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\064\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\061\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\062\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\055\000\
    \058\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\000\000\054\000\000\000\
    \000\000\255\255\000\000\101\000\057\000\000\000\057\000\000\000\
    \058\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\000\000\054\000\000\000\
    \000\000\000\000\000\000\000\000\060\000\255\255\060\000\000\000\
    \054\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\061\000\
    \054\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\063\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\061\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\061\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\063\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\061\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\066\000\004\000\004\000\004\000\004\000\004\000\061\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\067\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\061\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\061\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\069\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\061\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\070\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\061\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\067\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\074\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\000\000\000\000\000\000\000\000\073\000\
    \000\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\081\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\000\000\000\000\
    \000\000\084\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\090\000\090\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\091\000\091\000\091\000\
    \091\000\091\000\091\000\091\000\091\000\091\000\091\000\093\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\000\000\000\000\000\000\000\000\089\000\000\000\000\000\
    \000\000\000\000\000\000\088\000\000\000\000\000\000\000\082\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\087\000\
    \000\000\000\000\000\000\086\000\000\000\085\000\000\000\083\000\
    \094\000\094\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\094\000\095\000\095\000\095\000\095\000\095\000\095\000\
    \095\000\095\000\095\000\095\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\038\000\099\000\000\000\104\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \013\000\013\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\014\000\014\000\016\000\021\000\
    \024\000\034\000\051\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\020\000\061\000\074\000\
    \091\000\003\000\020\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\039\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\105\000\255\255\255\255\255\255\075\000\004\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\039\000\255\255\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\255\255\255\255\255\255\255\255\004\000\
    \075\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\005\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\255\255\
    \255\255\255\255\255\255\005\000\255\255\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\096\000\075\000\100\000\096\000\006\000\
    \100\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\007\000\255\255\100\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\255\255\
    \255\255\255\255\255\255\007\000\255\255\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\008\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\255\255\255\255\255\255\255\255\008\000\
    \255\255\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\010\000\
    \009\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\255\255\010\000\255\255\
    \255\255\096\000\255\255\100\000\054\000\255\255\054\000\255\255\
    \009\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\255\255\010\000\255\255\
    \255\255\255\255\255\255\255\255\058\000\077\000\058\000\255\255\
    \055\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\062\000\
    \055\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\255\255\255\255\255\255\255\255\255\255\077\000\
    \255\255\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\255\255\255\255\255\255\255\255\062\000\
    \255\255\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\063\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\255\255\
    \255\255\255\255\255\255\063\000\255\255\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\064\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\255\255\077\000\255\255\255\255\255\255\255\255\
    \255\255\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\255\255\255\255\255\255\255\255\064\000\
    \255\255\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\065\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\255\255\
    \255\255\255\255\255\255\065\000\255\255\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\066\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\255\255\255\255\255\255\255\255\066\000\
    \255\255\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\067\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\255\255\
    \255\255\255\255\255\255\067\000\255\255\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\068\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\255\255\255\255\255\255\255\255\068\000\
    \255\255\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\069\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\255\255\
    \255\255\255\255\255\255\069\000\255\255\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\070\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\255\255\255\255\255\255\255\255\070\000\
    \255\255\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\073\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\255\255\255\255\255\255\255\255\073\000\
    \255\255\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\078\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\255\255\255\255\
    \255\255\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\090\000\090\000\090\000\
    \090\000\090\000\090\000\090\000\090\000\090\000\090\000\092\000\
    \092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
    \092\000\255\255\255\255\255\255\255\255\078\000\255\255\255\255\
    \255\255\255\255\255\255\078\000\255\255\255\255\255\255\078\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\078\000\
    \255\255\255\255\255\255\078\000\255\255\078\000\255\255\078\000\
    \093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
    \093\000\093\000\094\000\094\000\094\000\094\000\094\000\094\000\
    \094\000\094\000\094\000\094\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec read lexbuf =
   __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 88 "src/semantics/core/parser/lexer.mll"
                      ( read lexbuf )
# 616 "src/semantics/core/parser/lexer.ml"

  | 1 ->
# 89 "src/semantics/core/parser/lexer.mll"
                      ( new_line lexbuf; read lexbuf )
# 621 "src/semantics/core/parser/lexer.ml"

  | 2 ->
# 90 "src/semantics/core/parser/lexer.mll"
                      ( COMMA )
# 626 "src/semantics/core/parser/lexer.ml"

  | 3 ->
# 91 "src/semantics/core/parser/lexer.mll"
                      ( SEMICOLON )
# 631 "src/semantics/core/parser/lexer.ml"

  | 4 ->
# 92 "src/semantics/core/parser/lexer.mll"
                      ( COLON )
# 636 "src/semantics/core/parser/lexer.ml"

  | 5 ->
# 93 "src/semantics/core/parser/lexer.mll"
                      ( DEFEQ )
# 641 "src/semantics/core/parser/lexer.ml"

  | 6 ->
# 94 "src/semantics/core/parser/lexer.mll"
                      ( ATSIGN )
# 646 "src/semantics/core/parser/lexer.ml"

  | 7 ->
# 95 "src/semantics/core/parser/lexer.mll"
                      ( HASH )
# 651 "src/semantics/core/parser/lexer.ml"

  | 8 ->
# 96 "src/semantics/core/parser/lexer.mll"
                      ( LPAREN )
# 656 "src/semantics/core/parser/lexer.ml"

  | 9 ->
# 97 "src/semantics/core/parser/lexer.mll"
                      ( RPAREN )
# 661 "src/semantics/core/parser/lexer.ml"

  | 10 ->
# 98 "src/semantics/core/parser/lexer.mll"
                      ( LBRACE )
# 666 "src/semantics/core/parser/lexer.ml"

  | 11 ->
# 99 "src/semantics/core/parser/lexer.mll"
                      ( RBRACE )
# 671 "src/semantics/core/parser/lexer.ml"

  | 12 ->
# 100 "src/semantics/core/parser/lexer.mll"
                      ( LBRACK )
# 676 "src/semantics/core/parser/lexer.ml"

  | 13 ->
# 101 "src/semantics/core/parser/lexer.mll"
                      ( RBRACK )
# 681 "src/semantics/core/parser/lexer.ml"

  | 14 ->
# 102 "src/semantics/core/parser/lexer.mll"
                      ( QUESTION )
# 686 "src/semantics/core/parser/lexer.ml"

  | 15 ->
# 103 "src/semantics/core/parser/lexer.mll"
                      ( EXCLAMATION )
# 691 "src/semantics/core/parser/lexer.ml"

  | 16 ->
# 104 "src/semantics/core/parser/lexer.mll"
                      ( PLUS )
# 696 "src/semantics/core/parser/lexer.ml"

  | 17 ->
# 105 "src/semantics/core/parser/lexer.mll"
                      ( MINUS )
# 701 "src/semantics/core/parser/lexer.ml"

  | 18 ->
# 106 "src/semantics/core/parser/lexer.mll"
                      ( TIMES )
# 706 "src/semantics/core/parser/lexer.ml"

  | 19 ->
# 107 "src/semantics/core/parser/lexer.mll"
                      ( DIVIDE )
# 711 "src/semantics/core/parser/lexer.ml"

  | 20 ->
# 108 "src/semantics/core/parser/lexer.mll"
                      ( MODULO )
# 716 "src/semantics/core/parser/lexer.ml"

  | 21 ->
# 109 "src/semantics/core/parser/lexer.mll"
                      ( POW )
# 721 "src/semantics/core/parser/lexer.ml"

  | 22 ->
# 110 "src/semantics/core/parser/lexer.mll"
                      ( TILDE )
# 726 "src/semantics/core/parser/lexer.ml"

  | 23 ->
# 111 "src/semantics/core/parser/lexer.mll"
                      ( AMPERSAND )
# 731 "src/semantics/core/parser/lexer.ml"

  | 24 ->
# 112 "src/semantics/core/parser/lexer.mll"
                      ( PIPE )
# 736 "src/semantics/core/parser/lexer.ml"

  | 25 ->
# 113 "src/semantics/core/parser/lexer.mll"
                      ( CARET )
# 741 "src/semantics/core/parser/lexer.ml"

  | 26 ->
# 114 "src/semantics/core/parser/lexer.mll"
                      ( SHIFT_LEFT )
# 746 "src/semantics/core/parser/lexer.ml"

  | 27 ->
# 115 "src/semantics/core/parser/lexer.mll"
                      ( SHIFT_RIGHT )
# 751 "src/semantics/core/parser/lexer.ml"

  | 28 ->
# 116 "src/semantics/core/parser/lexer.mll"
                      ( SHIFT_RIGHT_LOGICAL )
# 756 "src/semantics/core/parser/lexer.ml"

  | 29 ->
# 117 "src/semantics/core/parser/lexer.mll"
                      ( LAND )
# 761 "src/semantics/core/parser/lexer.ml"

  | 30 ->
# 118 "src/semantics/core/parser/lexer.mll"
                    ( LOR )
# 766 "src/semantics/core/parser/lexer.ml"

  | 31 ->
# 119 "src/semantics/core/parser/lexer.mll"
                      ( EQ )
# 771 "src/semantics/core/parser/lexer.ml"

  | 32 ->
# 120 "src/semantics/core/parser/lexer.mll"
                      ( NE )
# 776 "src/semantics/core/parser/lexer.ml"

  | 33 ->
# 121 "src/semantics/core/parser/lexer.mll"
                      ( LT )
# 781 "src/semantics/core/parser/lexer.ml"

  | 34 ->
# 122 "src/semantics/core/parser/lexer.mll"
                      ( GT )
# 786 "src/semantics/core/parser/lexer.ml"

  | 35 ->
# 123 "src/semantics/core/parser/lexer.mll"
                      ( LE )
# 791 "src/semantics/core/parser/lexer.ml"

  | 36 ->
# 124 "src/semantics/core/parser/lexer.mll"
                      ( GE )
# 796 "src/semantics/core/parser/lexer.ml"

  | 37 ->
# 125 "src/semantics/core/parser/lexer.mll"
                      ( create_string lexbuf (read_string (Buffer.create 16)) )
# 801 "src/semantics/core/parser/lexer.ml"

  | 38 ->
# 126 "src/semantics/core/parser/lexer.mll"
                      ( INT (int_of_string (Lexing.lexeme lexbuf)) )
# 806 "src/semantics/core/parser/lexer.ml"

  | 39 ->
# 127 "src/semantics/core/parser/lexer.mll"
                      ( FLOAT (float_of_string (Lexing.lexeme lexbuf)) )
# 811 "src/semantics/core/parser/lexer.ml"

  | 40 ->
# 128 "src/semantics/core/parser/lexer.mll"
                      ( BOOLEAN (bool_of_string (Lexing.lexeme lexbuf)) )
# 816 "src/semantics/core/parser/lexer.ml"

  | 41 ->
let
# 129 "src/semantics/core/parser/lexer.mll"
          x
# 822 "src/semantics/core/parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 129 "src/semantics/core/parser/lexer.mll"
                      ( try Hashtbl.find keywords x with Not_found -> ID x )
# 826 "src/semantics/core/parser/lexer.ml"

  | 42 ->
# 130 "src/semantics/core/parser/lexer.mll"
                      ( SYMBOL (String_utils.chop_first_char (Lexing.lexeme lexbuf)) )
# 831 "src/semantics/core/parser/lexer.ml"

  | 43 ->
# 131 "src/semantics/core/parser/lexer.mll"
                      ( read_line_comment lexbuf )
# 836 "src/semantics/core/parser/lexer.ml"

  | 44 ->
# 132 "src/semantics/core/parser/lexer.mll"
                      ( read_block_comment lexbuf )
# 841 "src/semantics/core/parser/lexer.ml"

  | 45 ->
# 133 "src/semantics/core/parser/lexer.mll"
                      ( raise (create_syntax_error "Unexpected char" lexbuf) )
# 846 "src/semantics/core/parser/lexer.ml"

  | 46 ->
# 134 "src/semantics/core/parser/lexer.mll"
                      ( EOF )
# 851 "src/semantics/core/parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

and read_string buf lexbuf =
   __ocaml_lex_read_string_rec buf lexbuf 75
and __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 140 "src/semantics/core/parser/lexer.mll"
                          ( STRING (Buffer.contents buf)                         )
# 863 "src/semantics/core/parser/lexer.ml"

  | 1 ->
# 141 "src/semantics/core/parser/lexer.mll"
                          ( Buffer.add_char buf '\\';    read_string buf lexbuf  )
# 868 "src/semantics/core/parser/lexer.ml"

  | 2 ->
# 142 "src/semantics/core/parser/lexer.mll"
                          ( Buffer.add_char buf '\b';    read_string buf lexbuf  )
# 873 "src/semantics/core/parser/lexer.ml"

  | 3 ->
# 143 "src/semantics/core/parser/lexer.mll"
                          ( Buffer.add_char buf '\n';    read_string buf lexbuf  )
# 878 "src/semantics/core/parser/lexer.ml"

  | 4 ->
# 144 "src/semantics/core/parser/lexer.mll"
                          ( Buffer.add_char buf '\r';    read_string buf lexbuf  )
# 883 "src/semantics/core/parser/lexer.ml"

  | 5 ->
# 145 "src/semantics/core/parser/lexer.mll"
                          ( Buffer.add_char buf '\t';    read_string buf lexbuf  )
# 888 "src/semantics/core/parser/lexer.ml"

  | 6 ->
# 146 "src/semantics/core/parser/lexer.mll"
                          ( Buffer.add_char buf '\000';  read_string buf lexbuf  )
# 893 "src/semantics/core/parser/lexer.ml"

  | 7 ->
# 147 "src/semantics/core/parser/lexer.mll"
                          ( Buffer.add_char buf '\011';  read_string buf lexbuf  )
# 898 "src/semantics/core/parser/lexer.ml"

  | 8 ->
# 148 "src/semantics/core/parser/lexer.mll"
                          ( Buffer.add_char buf '\012';  read_string buf lexbuf  )
# 903 "src/semantics/core/parser/lexer.ml"

  | 9 ->
# 149 "src/semantics/core/parser/lexer.mll"
                          ( Buffer.add_char buf '\"';    read_string buf lexbuf  )
# 908 "src/semantics/core/parser/lexer.ml"

  | 10 ->
let
# 150 "src/semantics/core/parser/lexer.mll"
                     c
# 914 "src/semantics/core/parser/lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_start_pos + 4) in
# 150 "src/semantics/core/parser/lexer.mll"
                          (
                            Buffer.add_char buf (Char.chr (int_of_string c));
                            read_string buf lexbuf
                          )
# 921 "src/semantics/core/parser/lexer.ml"

  | 11 ->
# 154 "src/semantics/core/parser/lexer.mll"
                          (
                            let s = Lexing.lexeme lexbuf in
                            let s' = "\"" ^ s ^ "\"" in
                            let s'' = Scanf.sscanf s' "%S" (fun s -> s) in
                            Buffer.add_string buf s'';
                            read_string buf lexbuf
                          )
# 932 "src/semantics/core/parser/lexer.ml"

  | 12 ->
# 161 "src/semantics/core/parser/lexer.mll"
                          (
                            Buffer.add_string buf (Lexing.lexeme lexbuf);
                            read_string buf lexbuf
                          )
# 940 "src/semantics/core/parser/lexer.ml"

  | 13 ->
# 165 "src/semantics/core/parser/lexer.mll"
                          ( raise (create_syntax_error "Illegal string character" lexbuf) )
# 945 "src/semantics/core/parser/lexer.ml"

  | 14 ->
# 166 "src/semantics/core/parser/lexer.mll"
                          ( raise (create_syntax_error ~eof:true "String is not terminated" lexbuf) )
# 950 "src/semantics/core/parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state

and read_line_comment lexbuf =
   __ocaml_lex_read_line_comment_rec lexbuf 96
and __ocaml_lex_read_line_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 172 "src/semantics/core/parser/lexer.mll"
              ( new_line lexbuf; read lexbuf )
# 962 "src/semantics/core/parser/lexer.ml"

  | 1 ->
# 173 "src/semantics/core/parser/lexer.mll"
              ( read_line_comment lexbuf )
# 967 "src/semantics/core/parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_line_comment_rec lexbuf __ocaml_lex_state

and read_block_comment lexbuf =
   __ocaml_lex_read_block_comment_rec lexbuf 100
and __ocaml_lex_read_block_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 177 "src/semantics/core/parser/lexer.mll"
              ( read lexbuf )
# 979 "src/semantics/core/parser/lexer.ml"

  | 1 ->
# 178 "src/semantics/core/parser/lexer.mll"
              ( new_line lexbuf; read_block_comment lexbuf )
# 984 "src/semantics/core/parser/lexer.ml"

  | 2 ->
# 179 "src/semantics/core/parser/lexer.mll"
              ( read_block_comment lexbuf )
# 989 "src/semantics/core/parser/lexer.ml"

  | 3 ->
# 180 "src/semantics/core/parser/lexer.mll"
              ( raise (create_syntax_error ~eof:true "Comment is not terminated" lexbuf))
# 994 "src/semantics/core/parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_block_comment_rec lexbuf __ocaml_lex_state

;;

