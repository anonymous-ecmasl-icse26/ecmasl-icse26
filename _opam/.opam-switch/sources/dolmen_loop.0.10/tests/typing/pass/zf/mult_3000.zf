
# Example for exercizing rewriting
# Here, 100 * 3 = (100 + 100) + 100

data nat :=
  | Z
  | S nat.

val plus : nat -> nat -> nat.
rewrite forall (x : nat). plus Z x = x.
rewrite forall (x y : nat). plus (S x) y = S (plus x y).

val mult : nat -> nat -> nat.
rewrite forall (x : nat). mult Z x = Z.
rewrite forall (x y : nat). mult (S x) y = plus y (mult x y).

def hundred : nat := S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S Z))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).

# n: 1000
def n : nat := mult (S (S (S (S (S (S (S (S (S (S Z)))))))))) hundred.

def three : nat := S (S (S Z)).

goal mult n three = plus (plus n n) n.


