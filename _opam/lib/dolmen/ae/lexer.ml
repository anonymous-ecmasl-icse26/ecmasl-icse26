# 6 "src/languages/ae/lexer.mll"
 
  exception Error

  module T = Dolmen_std.Tok

  open Tokens

  (* Token printing *)

  let reserved s =
    T.descr s
      ~kind:"reserved word"
      ~hint:"reserved words cannot be used as identifiers"

  let descr token : T.descr =
    match (token : token) with
    | ID s -> T.descr ~kind:"identifier" s
    | QM_ID s -> T.descr ~kind:"variable id" s
    | INTEGER s -> T.descr ~kind:"integer" s
    | DECIMAL s -> T.descr ~kind:"decimal" s
    | HEXADECIMAL s -> T.descr ~kind:"hexadecimal" s
    | STRING s -> T.descr ~kind:"string" s
    | MATCH -> reserved "match"
    | WITH -> reserved "with"
    | THEORY -> reserved "theory"
    | EXTENDS -> reserved "extends"
    | END -> reserved "end"
    | QM -> reserved "?"
    | AND -> reserved "and"
    | LEFTARROW -> reserved "<-"
    | RIGHTARROW -> reserved "->"
    | AC -> reserved "ac"
    | AT -> reserved "@"
    | AXIOM -> reserved "axiom"
    | CASESPLIT -> reserved "case_split"
    | REWRITING -> reserved "rewriting"
    | BAR -> reserved "|"
    | HAT -> reserved "^"
    | BOOL -> reserved "bool"
    | COLON -> reserved ":"
    | COMMA -> reserved ","
    | PV -> reserved ";"
    | DISTINCT -> reserved "distinct"
    | DOT -> reserved "."
    | SHARP -> reserved "#"
    | ELSE -> reserved "else"
    | OF -> reserved "of"
    | EOF -> T.descr ~kind:"end of file token" ""
    | EQUAL -> reserved "equal"
    | EXISTS -> reserved "exists"
    | FALSE -> reserved "false"
    | VOID -> reserved "void"
    | FORALL ->reserved "forall"
    | FUNC -> reserved "function"
    | GE -> reserved ">="
    | GOAL -> reserved "goal"
    | CHECK_SAT -> reserved "check_sat"
    | GT -> reserved ">"
    | CHECK -> reserved "check"
    | CUT -> reserved "cut"
    | IF -> reserved "if"
    | IN -> reserved "in"
    | INT -> reserved "int"
    | BITV -> reserved "bitv"
    | MAPS_TO -> reserved "|->"
    | LE -> reserved "<="
    | LET -> reserved "let"
    | LEFTPAR -> reserved "("
    | LEFTSQ -> reserved "["
    | LEFTBR -> reserved "{"
    | LOGIC -> reserved "logic"
    | LRARROW -> reserved "<->"
    | XOR -> reserved "xor"
    | LT -> reserved "<"
    | MINUS -> reserved "-"
    | NOT -> reserved "not"
    | NOTEQ -> reserved "<>"
    | OR -> reserved "or"
    | PERCENT -> reserved "%"
    | PLUS -> reserved "+"
    | PRED -> reserved "predicate"
    | PROP -> reserved "prop"
    | QUOTE -> reserved "'"
    | REAL -> reserved "real"
    | UNIT -> reserved "unit"
    | RIGHTPAR -> reserved ")"
    | RIGHTSQ -> reserved "]"
    | RIGHTBR -> reserved "}"
    | SLASH -> reserved "/"
    | POW -> reserved "**"
    | POWDOT -> reserved "**."
    | THEN -> reserved "then"
    | TIMES -> reserved "*"
    | TRUE -> reserved "true"
    | TYPE -> reserved "type"

  (* Token parsing *)

  let escaped_char = function
    | 'n' -> '\n'
    | 'r' -> '\r'
    | 't' -> '\t'
    | c -> c


# 108 "src/languages/ae/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\212\255\213\255\214\255\216\255\047\000\218\255\219\255\
    \220\255\221\255\222\255\224\255\225\255\226\255\054\000\231\255\
    \065\000\237\255\082\000\066\000\241\255\242\255\244\255\245\255\
    \246\255\087\000\082\000\099\000\121\000\194\000\252\000\006\000\
    \255\255\080\001\155\001\154\000\183\001\109\000\131\000\215\001\
    \164\000\193\001\227\001\250\001\032\002\059\002\069\002\079\002\
    \247\255\240\255\232\255\235\255\078\000\238\255\233\255\095\000\
    \228\255\080\000\215\255\098\001\252\255\253\255\104\000\148\000\
    \255\255\254\255\217\001\251\255\252\255\253\255\002\000\255\255\
    \254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\038\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\026\000\255\255\
    \021\000\255\255\019\000\025\000\255\255\255\255\255\255\255\255\
    \255\255\012\000\032\000\005\000\005\000\004\000\002\000\001\000\
    \255\255\003\000\255\255\006\000\255\255\006\000\255\255\255\255\
    \006\000\255\255\255\255\255\255\255\255\007\000\255\255\006\000\
    \255\255\255\255\255\255\255\255\016\000\255\255\255\255\028\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\004\000\255\255\
    \255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\255\255\
    \000\000\255\255\000\000\060\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\067\000\000\000\000\000\000\000\072\000\000\000\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\031\000\032\000\000\000\000\000\031\000\000\000\031\000\
    \000\000\000\000\000\000\031\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \031\000\000\000\003\000\010\000\000\000\012\000\031\000\024\000\
    \025\000\021\000\014\000\015\000\023\000\019\000\026\000\013\000\
    \028\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\020\000\022\000\018\000\017\000\016\000\030\000\
    \011\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\009\000\057\000\008\000\004\000\029\000\
    \055\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\007\000\005\000\006\000\054\000\052\000\
    \049\000\048\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\047\000\047\000\047\000\053\000\056\000\058\000\051\000\
    \050\000\035\000\065\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\035\000\
    \036\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\064\000\036\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \036\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\036\000\039\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\034\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\000\000\000\000\000\000\039\000\
    \002\000\029\000\255\255\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\000\000\000\000\000\000\
    \000\000\029\000\000\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\
    \000\000\000\000\000\000\033\000\000\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\062\000\000\000\063\000\000\000\000\000\033\000\
    \000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\038\000\069\000\038\000\000\000\000\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\071\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\041\000\000\000\041\000\000\000\000\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\043\000\000\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\000\000\070\000\000\000\000\000\
    \000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\000\000\000\000\000\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\044\000\046\000\000\000\046\000\000\000\000\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\000\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\000\000\061\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\044\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\039\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\039\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\068\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\031\000\
    \255\255\255\255\255\255\031\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\000\000\031\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\016\000\018\000\
    \019\000\025\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\052\000\055\000\057\000\018\000\
    \018\000\027\000\062\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\028\000\
    \027\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\063\000\028\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \027\000\255\255\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\028\000\035\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\029\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\028\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\255\255\255\255\255\255\035\000\
    \000\000\029\000\070\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\255\255\255\255\255\255\
    \255\255\029\000\255\255\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\255\255\
    \255\255\255\255\255\255\030\000\255\255\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\033\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\059\000\255\255\059\000\255\255\255\255\033\000\
    \255\255\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\255\255\255\255\255\255\255\255\033\000\
    \255\255\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\034\000\034\000\034\000\034\000\
    \034\000\034\000\036\000\066\000\036\000\255\255\255\255\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\066\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\039\000\255\255\039\000\255\255\255\255\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\042\000\255\255\042\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\042\000\042\000\042\000\042\000\
    \042\000\042\000\043\000\043\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\255\255\066\000\255\255\255\255\
    \255\255\255\255\255\255\043\000\043\000\043\000\043\000\043\000\
    \043\000\255\255\255\255\255\255\042\000\042\000\042\000\042\000\
    \042\000\042\000\043\000\044\000\255\255\044\000\255\255\255\255\
    \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\255\255\043\000\043\000\043\000\043\000\043\000\
    \043\000\255\255\059\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\043\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\046\000\046\000\046\000\
    \046\000\046\000\046\000\046\000\046\000\046\000\046\000\047\000\
    \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
    \047\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\047\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\047\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\066\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token newline lexbuf =
   __ocaml_lex_token_rec newline lexbuf 0
and __ocaml_lex_token_rec newline lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 128 "src/languages/ae/lexer.mll"
                              ( newline lexbuf; token newline lexbuf )
# 380 "src/languages/ae/lexer.ml"

  | 1 ->
# 129 "src/languages/ae/lexer.mll"
                              ( token newline lexbuf )
# 385 "src/languages/ae/lexer.ml"

  | 2 ->
# 130 "src/languages/ae/lexer.mll"
                              ( QM )
# 390 "src/languages/ae/lexer.ml"

  | 3 ->
let
# 131 "src/languages/ae/lexer.mll"
                      id
# 396 "src/languages/ae/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 131 "src/languages/ae/lexer.mll"
                              ( QM_ID id )
# 400 "src/languages/ae/lexer.ml"

  | 4 ->
let
# 132 "src/languages/ae/lexer.mll"
                  i
# 406 "src/languages/ae/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 132 "src/languages/ae/lexer.mll"
                              ( match i with
        | "ac"          -> AC
        | "and"         -> AND
        | "axiom"       -> AXIOM
        | "bitv"        -> BITV
        | "bool"        -> BOOL
        | "case_split"  -> CASESPLIT
        | "check"       -> CHECK
        | "cut"         -> CUT
        | "distinct"    -> DISTINCT
        | "else"        -> ELSE
        | "end"         -> END
        | "exists"      -> EXISTS
        | "extends"     -> EXTENDS
        | "false"       -> FALSE
        | "forall"      -> FORALL
        | "function"    -> FUNC
        | "goal"        -> GOAL
        | "check_sat"   -> CHECK_SAT
        | "if"          -> IF
        | "in"          -> IN
        | "int"         -> INT
        | "let"         -> LET
        | "logic"       -> LOGIC
        | "not"         -> NOT
        | "or"          -> OR
        | "xor"         -> XOR
        | "predicate"   -> PRED
        | "prop"        -> PROP
        | "real"        -> REAL
        | "rewriting"   -> REWRITING
        | "then"        -> THEN
        | "theory"      -> THEORY
        | "true"        -> TRUE
        | "type"        -> TYPE
        | "unit"        -> UNIT
        | "void"        -> VOID
        | "match"       -> MATCH
        | "with"        -> WITH
        | "of"          -> OF
        | _             -> ID i
      )
# 451 "src/languages/ae/lexer.ml"

  | 5 ->
let
# 174 "src/languages/ae/lexer.mll"
               s
# 457 "src/languages/ae/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 174 "src/languages/ae/lexer.mll"
                              ( INTEGER s )
# 461 "src/languages/ae/lexer.ml"

  | 6 ->
let
# 175 "src/languages/ae/lexer.mll"
            s
# 467 "src/languages/ae/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 175 "src/languages/ae/lexer.mll"
                              ( DECIMAL s )
# 471 "src/languages/ae/lexer.ml"

  | 7 ->
let
# 176 "src/languages/ae/lexer.mll"
                s
# 477 "src/languages/ae/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 176 "src/languages/ae/lexer.mll"
                              ( HEXADECIMAL s )
# 481 "src/languages/ae/lexer.ml"

  | 8 ->
# 177 "src/languages/ae/lexer.mll"
                              ( parse_comment newline lexbuf; token newline lexbuf )
# 486 "src/languages/ae/lexer.ml"

  | 9 ->
# 178 "src/languages/ae/lexer.mll"
                              ( QUOTE )
# 491 "src/languages/ae/lexer.ml"

  | 10 ->
# 179 "src/languages/ae/lexer.mll"
                              ( COMMA )
# 496 "src/languages/ae/lexer.ml"

  | 11 ->
# 180 "src/languages/ae/lexer.mll"
                              ( PV )
# 501 "src/languages/ae/lexer.ml"

  | 12 ->
# 181 "src/languages/ae/lexer.mll"
                              ( LEFTPAR )
# 506 "src/languages/ae/lexer.ml"

  | 13 ->
# 182 "src/languages/ae/lexer.mll"
                              ( RIGHTPAR )
# 511 "src/languages/ae/lexer.ml"

  | 14 ->
# 183 "src/languages/ae/lexer.mll"
                              ( COLON )
# 516 "src/languages/ae/lexer.ml"

  | 15 ->
# 184 "src/languages/ae/lexer.mll"
                              ( RIGHTARROW )
# 521 "src/languages/ae/lexer.ml"

  | 16 ->
# 185 "src/languages/ae/lexer.mll"
                              ( LEFTARROW )
# 526 "src/languages/ae/lexer.ml"

  | 17 ->
# 186 "src/languages/ae/lexer.mll"
                              ( LRARROW )
# 531 "src/languages/ae/lexer.ml"

  | 18 ->
# 187 "src/languages/ae/lexer.mll"
                              ( EQUAL )
# 536 "src/languages/ae/lexer.ml"

  | 19 ->
# 188 "src/languages/ae/lexer.mll"
                              ( LT )
# 541 "src/languages/ae/lexer.ml"

  | 20 ->
# 189 "src/languages/ae/lexer.mll"
                              ( LE )
# 546 "src/languages/ae/lexer.ml"

  | 21 ->
# 190 "src/languages/ae/lexer.mll"
                              ( GT )
# 551 "src/languages/ae/lexer.ml"

  | 22 ->
# 191 "src/languages/ae/lexer.mll"
                              ( GE )
# 556 "src/languages/ae/lexer.ml"

  | 23 ->
# 192 "src/languages/ae/lexer.mll"
                              ( NOTEQ )
# 561 "src/languages/ae/lexer.ml"

  | 24 ->
# 193 "src/languages/ae/lexer.mll"
                              ( PLUS )
# 566 "src/languages/ae/lexer.ml"

  | 25 ->
# 194 "src/languages/ae/lexer.mll"
                              ( MINUS )
# 571 "src/languages/ae/lexer.ml"

  | 26 ->
# 195 "src/languages/ae/lexer.mll"
                              ( TIMES )
# 576 "src/languages/ae/lexer.ml"

  | 27 ->
# 196 "src/languages/ae/lexer.mll"
                              ( POWDOT )
# 581 "src/languages/ae/lexer.ml"

  | 28 ->
# 197 "src/languages/ae/lexer.mll"
                              ( POW )
# 586 "src/languages/ae/lexer.ml"

  | 29 ->
# 198 "src/languages/ae/lexer.mll"
                              ( SLASH )
# 591 "src/languages/ae/lexer.ml"

  | 30 ->
# 199 "src/languages/ae/lexer.mll"
                              ( PERCENT )
# 596 "src/languages/ae/lexer.ml"

  | 31 ->
# 200 "src/languages/ae/lexer.mll"
                              ( AT )
# 601 "src/languages/ae/lexer.ml"

  | 32 ->
# 201 "src/languages/ae/lexer.mll"
                              ( DOT )
# 606 "src/languages/ae/lexer.ml"

  | 33 ->
# 202 "src/languages/ae/lexer.mll"
                              ( SHARP )
# 611 "src/languages/ae/lexer.ml"

  | 34 ->
# 203 "src/languages/ae/lexer.mll"
                              ( LEFTSQ )
# 616 "src/languages/ae/lexer.ml"

  | 35 ->
# 204 "src/languages/ae/lexer.mll"
                              ( RIGHTSQ )
# 621 "src/languages/ae/lexer.ml"

  | 36 ->
# 205 "src/languages/ae/lexer.mll"
                              ( LEFTBR )
# 626 "src/languages/ae/lexer.ml"

  | 37 ->
# 206 "src/languages/ae/lexer.mll"
                              ( RIGHTBR )
# 631 "src/languages/ae/lexer.ml"

  | 38 ->
# 207 "src/languages/ae/lexer.mll"
                              ( BAR )
# 636 "src/languages/ae/lexer.ml"

  | 39 ->
# 208 "src/languages/ae/lexer.mll"
                              ( HAT )
# 641 "src/languages/ae/lexer.ml"

  | 40 ->
# 209 "src/languages/ae/lexer.mll"
                              ( MAPS_TO )
# 646 "src/languages/ae/lexer.ml"

  | 41 ->
# 210 "src/languages/ae/lexer.mll"
                              ( parse_string newline (Buffer.create 1024) lexbuf )
# 651 "src/languages/ae/lexer.ml"

  | 42 ->
# 211 "src/languages/ae/lexer.mll"
                              ( EOF )
# 656 "src/languages/ae/lexer.ml"

  | 43 ->
# 212 "src/languages/ae/lexer.mll"
      ( raise Error )
# 661 "src/languages/ae/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec newline lexbuf __ocaml_lex_state

and parse_comment newline lexbuf =
   __ocaml_lex_parse_comment_rec newline lexbuf 59
and __ocaml_lex_parse_comment_rec newline lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 215 "src/languages/ae/lexer.mll"
            ( () )
# 673 "src/languages/ae/lexer.ml"

  | 1 ->
# 216 "src/languages/ae/lexer.mll"
            ( parse_comment newline lexbuf; parse_comment newline lexbuf )
# 678 "src/languages/ae/lexer.ml"

  | 2 ->
# 217 "src/languages/ae/lexer.mll"
            ( raise Error )
# 683 "src/languages/ae/lexer.ml"

  | 3 ->
let
# 218 "src/languages/ae/lexer.mll"
         c
# 689 "src/languages/ae/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 218 "src/languages/ae/lexer.mll"
            ( if c = '\n' then newline lexbuf; parse_comment newline lexbuf )
# 693 "src/languages/ae/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_parse_comment_rec newline lexbuf __ocaml_lex_state

and parse_string newline str_buf lexbuf =
   __ocaml_lex_parse_string_rec newline str_buf lexbuf 66
and __ocaml_lex_parse_string_rec newline str_buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 221 "src/languages/ae/lexer.mll"
                  ( STRING (Buffer.contents str_buf) )
# 705 "src/languages/ae/lexer.ml"

  | 1 ->
let
# 222 "src/languages/ae/lexer.mll"
               c
# 711 "src/languages/ae/lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 222 "src/languages/ae/lexer.mll"
                  ( Buffer.add_char str_buf (escaped_char c);
                    parse_string newline str_buf lexbuf )
# 716 "src/languages/ae/lexer.ml"

  | 2 ->
# 224 "src/languages/ae/lexer.mll"
                  ( newline lexbuf;
                    Buffer.add_char str_buf '\n';
                    parse_string newline str_buf lexbuf )
# 723 "src/languages/ae/lexer.ml"

  | 3 ->
# 227 "src/languages/ae/lexer.mll"
                  ( raise Error )
# 728 "src/languages/ae/lexer.ml"

  | 4 ->
let
# 228 "src/languages/ae/lexer.mll"
         c
# 734 "src/languages/ae/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 228 "src/languages/ae/lexer.mll"
                  ( Buffer.add_char str_buf c;
                    parse_string newline str_buf lexbuf )
# 739 "src/languages/ae/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_parse_string_rec newline str_buf lexbuf __ocaml_lex_state

;;

