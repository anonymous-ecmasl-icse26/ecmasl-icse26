# 4 "src/languages/icnf/lexer.mll"
 
  exception Error

  module T = Dolmen_std.Tok

  open Tokens

  let descr token : T.descr =
    match (token : token) with
    | EOF -> T.descr ~kind:"end of file token" ""
    | NEWLINE -> T.descr ~kind:"newline character" ""
    | A -> T.descr ~kind:"keyword" "a"
    | P -> T.descr ~kind:"keyword" "p"
    | INCCNF -> T.descr ~kind:"keyword" "inccnf"
    | ZERO -> T.descr ~kind:"integer" "0"
    | INT i -> T.descr ~kind:"integer" (string_of_int i)


# 21 "src/languages/icnf/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\246\255\247\255\009\000\019\000\249\255\250\255\251\255\
    \000\000\253\255\254\255\255\255\001\000\002\000\001\000\000\000\
    \252\255\029\000\001\000\254\255\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\009\000\007\000\255\255\255\255\255\255\
    \009\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\007\000\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\019\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\005\000\002\000\020\000\000\000\005\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
    \006\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\009\000\000\000\011\000\013\000\014\000\016\000\000\000\
    \000\000\008\000\000\000\000\000\000\000\000\000\012\000\015\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \007\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\018\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\012\000\013\000\015\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\008\000\014\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\018\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token newline lexbuf =
   __ocaml_lex_token_rec newline lexbuf 0
and __ocaml_lex_token_rec newline lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 35 "src/languages/icnf/lexer.mll"
                    ( comment newline lexbuf )
# 130 "src/languages/icnf/lexer.ml"

  | 1 ->
# 36 "src/languages/icnf/lexer.mll"
                    ( P )
# 135 "src/languages/icnf/lexer.ml"

  | 2 ->
# 37 "src/languages/icnf/lexer.mll"
                    ( A )
# 140 "src/languages/icnf/lexer.ml"

  | 3 ->
# 38 "src/languages/icnf/lexer.mll"
                    ( INCCNF )
# 145 "src/languages/icnf/lexer.ml"

  | 4 ->
# 39 "src/languages/icnf/lexer.mll"
                    ( EOF )
# 150 "src/languages/icnf/lexer.ml"

  | 5 ->
# 40 "src/languages/icnf/lexer.mll"
                    ( ZERO )
# 155 "src/languages/icnf/lexer.ml"

  | 6 ->
# 41 "src/languages/icnf/lexer.mll"
                    ( token newline lexbuf )
# 160 "src/languages/icnf/lexer.ml"

  | 7 ->
# 42 "src/languages/icnf/lexer.mll"
                    ( INT (int_of_string @@ Lexing.lexeme lexbuf) )
# 165 "src/languages/icnf/lexer.ml"

  | 8 ->
# 43 "src/languages/icnf/lexer.mll"
                    ( newline lexbuf; NEWLINE )
# 170 "src/languages/icnf/lexer.ml"

  | 9 ->
# 44 "src/languages/icnf/lexer.mll"
                    ( raise Error )
# 175 "src/languages/icnf/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec newline lexbuf __ocaml_lex_state

and comment newline lexbuf =
   __ocaml_lex_comment_rec newline lexbuf 18
and __ocaml_lex_comment_rec newline lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 47 "src/languages/icnf/lexer.mll"
                    ( newline lexbuf; token newline lexbuf )
# 187 "src/languages/icnf/lexer.ml"

  | 1 ->
# 48 "src/languages/icnf/lexer.mll"
                    ( comment newline lexbuf )
# 192 "src/languages/icnf/lexer.ml"

  | 2 ->
# 49 "src/languages/icnf/lexer.mll"
                    ( raise Error )
# 197 "src/languages/icnf/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec newline lexbuf __ocaml_lex_state

;;

