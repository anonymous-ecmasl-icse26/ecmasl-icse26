# 6 "src/languages/smtlib2/poly/lexer.mll"
 
  exception Error

  module T = Dolmen_std.Tok
  module M = Map.Make(String)

  open Tokens

  (* Token printing *)

  let keyword_descr s =
    T.descr s ~kind:"keyword"

  let reserved_descr s =
    T.descr s ~kind:"reserved word"

  let descr token : T.descr =
    match (token : token) with
    | EOF -> T.descr ~kind:"end of file token" ""
    | OPEN -> T.descr ~article:"an" ~kind:"opening parenthesis" ""
    | CLOSE -> T.descr ~article:"a" ~kind:"closing parenthesis" ""
    | NUM s -> T.descr ~kind:"integer" s
    | DEC s -> T.descr ~kind:"decimal" s
    | HEX s -> T.descr ~kind:"hexadecimal" s
    | BIN s -> T.descr ~kind:"binary" s
    | STR s -> T.descr ~kind:"string" s
    | SYMBOL s -> T.descr ~kind:"symbol" s
    | KEYWORD s -> keyword_descr s
    | UNDERSCORE -> reserved_descr "_"
    | ATTRIBUTE -> reserved_descr "!"
    | AS -> reserved_descr "as"
    | LET -> reserved_descr "let"
    | EXISTS -> reserved_descr "exists"
    | FORALL -> reserved_descr "forall"
    | MATCH -> reserved_descr "match"
    | PAR -> reserved_descr "par"
    | ASSERT -> reserved_descr "assert"
    | CHECK_SAT -> reserved_descr "check-sat"
    | CHECK_SAT_ASSUMING -> reserved_descr "check-sat-assuming"
    | DECLARE_CONST -> reserved_descr "declare-const"
    | DECLARE_DATATYPE -> reserved_descr "declare-datatype"
    | DECLARE_DATATYPES -> reserved_descr "declare-datatypes"
    | DECLARE_FUN -> reserved_descr "declare-fun"
    | DECLARE_SORT -> reserved_descr "declare-sort"
    | DEFINE_FUN -> reserved_descr "define-fun"
    | DEFINE_FUN_REC -> reserved_descr "define-fun-rec"
    | DEFINE_FUNS_REC -> reserved_descr "define-funs-rec"
    | DEFINE_SORT -> reserved_descr "define-sort"
    | ECHO -> reserved_descr "echo"
    | EXIT -> reserved_descr "exit"
    | GET_ASSERTIONS -> reserved_descr "get-assertions"
    | GET_ASSIGNMENT -> reserved_descr "gert-assignment"
    | GET_INFO -> reserved_descr "get-info"
    | GET_MODEL -> reserved_descr "get-model"
    | GET_OPTION -> reserved_descr "get-option"
    | GET_PROOF -> reserved_descr "get-proof"
    | GET_UNSAT_ASSUMPTIONS -> reserved_descr "get-unsat-assumptions"
    | GET_UNSAT_CORE -> reserved_descr "get-unsat-core"
    | GET_VALUE -> reserved_descr "get-value"
    | POP -> reserved_descr "pop"
    | PUSH -> reserved_descr "push"
    | RESET -> reserved_descr "reset"
    | RESET_ASSERTIONS -> reserved_descr "reset-assertions"
    | SET_INFO -> reserved_descr "set-info"
    | SET_LOGIC -> reserved_descr "set-logic"
    | SET_OPTION -> reserved_descr "set-option"

  (* Token parsing *)

  let bind map (x, v) = M.add x v map

  let reserved_words =
    List.fold_left bind M.empty [
    (* reserved words *)
      (* These are currently unused in smtlib scripts commands
       * (they are only used in logic definitions), hence they are currently
       * ignored, given that only scripts are currently parsed.
    "BINARY", BINARY;
    "DECIMAL", DECIMAL;
    "HEXADECIMAL", HEXADECIMAL;
    "NUMERAL", NUMERAL;
    "STRING", STRING;
      *)
    "_", UNDERSCORE;
    "!", ATTRIBUTE;
    "as", AS;
    "let", LET;
    "exists", EXISTS;
    "forall", FORALL;
    "match", MATCH;
    "par", PAR;
    (* command names *)
    "assert", ASSERT;
    "check-sat", CHECK_SAT;
    "check-sat-assuming", CHECK_SAT_ASSUMING;
    "declare-const", DECLARE_CONST;
    "declare-datatype", DECLARE_DATATYPE;
    "declare-datatypes", DECLARE_DATATYPES;
    "declare-fun", DECLARE_FUN;
    "declare-sort", DECLARE_SORT;
    "define-fun", DEFINE_FUN;
    "define-fun-rec", DEFINE_FUN_REC;
    "define-funs-rec", DEFINE_FUNS_REC;
    "define-sort", DEFINE_SORT;
    "echo", ECHO;
    "exit", EXIT;
    "get-assertions", GET_ASSERTIONS;
    "get-assignment", GET_ASSIGNMENT;
    "get-info", GET_INFO;
    "get-model", GET_MODEL;
    "get-option", GET_OPTION;
    "get-proof", GET_PROOF;
    "get-unsat-assumptions", GET_UNSAT_ASSUMPTIONS;
    "get-unsat-core", GET_UNSAT_CORE;
    "get-value", GET_VALUE;
    "pop", POP;
    "push", PUSH;
    "reset", RESET;
    "reset-assertions", RESET_ASSERTIONS;
    "set-info", SET_INFO;
    "set-logic", SET_LOGIC;
    "set-option", SET_OPTION;
  ]

  let symbol newline lexbuf s =
    (* register the newlines in quoted symbols to maintain correct locations.*)
    for i = 0 to (String.length s - 1) do
      match s.[i] with
      | '\n' -> newline lexbuf
      | _ -> ()
    done;
    (* Check whether the symbol is a reserved word. *)
    try M.find s reserved_words
    with Not_found -> SYMBOL s

  let quoted_symbol newline lexbuf s =
    (* register the newlines in quoted symbols to maintain correct locations.*)
    for i = 0 to (String.length s - 1) do
      match s.[i] with
      | '\n' -> newline lexbuf
      | _ -> ()
    done;
    (* Quoted symbols allow to use reserved words as symbols *)
    SYMBOL s

# 148 "src/languages/smtlib2/poly/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\241\255\127\000\126\000\222\000\245\255\151\000\224\000\
    \045\000\250\255\251\255\093\001\253\255\007\000\255\255\080\001\
    \090\001\100\001\044\000\110\001\133\001\088\000\203\001\242\255\
    \080\002\112\002\252\255\253\255\010\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\014\000\012\000\014\000\255\255\014\000\006\000\
    \006\000\255\255\255\255\003\000\255\255\001\000\255\255\255\255\
    \007\000\007\000\255\255\255\255\008\000\009\000\011\000\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\024\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\000\000\011\000\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \024\000\027\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\013\000\012\000\000\000\000\000\013\000\000\000\000\000\
    \013\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \013\000\003\000\005\000\006\000\003\000\003\000\003\000\013\000\
    \010\000\009\000\003\000\003\000\029\000\003\000\003\000\003\000\
    \008\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\004\000\011\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\015\000\021\000\021\000\003\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\002\000\000\000\003\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \021\000\021\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \000\000\000\000\003\000\003\000\003\000\000\000\000\000\000\000\
    \003\000\003\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\255\255\003\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\018\000\000\000\023\000\003\000\000\000\255\255\022\000\
    \014\000\000\000\022\000\022\000\022\000\000\000\000\000\000\000\
    \022\000\022\000\000\000\022\000\022\000\022\000\015\000\019\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\000\000\000\000\000\000\022\000\022\000\000\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\000\000\000\000\000\000\022\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\255\255\
    \017\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\017\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\000\000\000\000\000\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\022\000\000\000\000\000\022\000\
    \022\000\022\000\000\000\000\000\000\000\022\000\022\000\000\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\000\000\000\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\000\000\000\000\
    \000\000\022\000\022\000\000\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\000\000\000\000\
    \000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\000\000\000\000\026\000\026\000\000\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\023\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \013\000\255\255\255\255\255\255\013\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
    \000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\008\000\018\000\018\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\255\255\000\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \021\000\021\000\002\000\002\000\255\255\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
    \002\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
    \255\255\255\255\003\000\003\000\003\000\255\255\255\255\255\255\
    \003\000\003\000\255\255\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \255\255\255\255\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\255\255\255\255\002\000\003\000\003\000\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\006\000\255\255\002\000\003\000\255\255\002\000\004\000\
    \000\000\255\255\004\000\004\000\004\000\255\255\255\255\255\255\
    \004\000\004\000\255\255\004\000\004\000\004\000\007\000\006\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\255\255\255\255\255\255\004\000\004\000\255\255\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\255\255\255\255\255\255\004\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\255\255\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\255\255\255\255\002\000\
    \015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
    \015\000\015\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\000\
    \019\000\019\000\019\000\019\000\019\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\020\000\020\000\
    \020\000\020\000\020\000\020\000\255\255\255\255\255\255\019\000\
    \019\000\019\000\019\000\019\000\019\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\011\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\020\000\020\000\
    \020\000\020\000\020\000\020\000\022\000\255\255\255\255\022\000\
    \022\000\022\000\255\255\255\255\255\255\022\000\022\000\255\255\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\255\255\255\255\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\255\255\255\255\
    \255\255\022\000\022\000\255\255\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\255\255\255\255\
    \255\255\022\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\255\255\255\255\024\000\024\000\011\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\255\255\255\255\025\000\025\000\255\255\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \255\255\255\255\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\024\000\255\255\255\255\024\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \024\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \025\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token newline lexbuf =
   __ocaml_lex_token_rec newline lexbuf 0
and __ocaml_lex_token_rec newline lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 183 "src/languages/smtlib2/poly/lexer.mll"
                        ( EOF )
# 410 "src/languages/smtlib2/poly/lexer.ml"

  | 1 ->
# 184 "src/languages/smtlib2/poly/lexer.mll"
                        ( token newline lexbuf )
# 415 "src/languages/smtlib2/poly/lexer.ml"

  | 2 ->
# 185 "src/languages/smtlib2/poly/lexer.mll"
                        ( newline lexbuf; token newline lexbuf )
# 420 "src/languages/smtlib2/poly/lexer.ml"

  | 3 ->
# 186 "src/languages/smtlib2/poly/lexer.mll"
                        ( token newline lexbuf )
# 425 "src/languages/smtlib2/poly/lexer.ml"

  | 4 ->
# 189 "src/languages/smtlib2/poly/lexer.mll"
                        ( OPEN )
# 430 "src/languages/smtlib2/poly/lexer.ml"

  | 5 ->
# 190 "src/languages/smtlib2/poly/lexer.mll"
                        ( CLOSE )
# 435 "src/languages/smtlib2/poly/lexer.ml"

  | 6 ->
let
# 191 "src/languages/smtlib2/poly/lexer.mll"
               s
# 441 "src/languages/smtlib2/poly/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 191 "src/languages/smtlib2/poly/lexer.mll"
                        ( NUM s )
# 445 "src/languages/smtlib2/poly/lexer.ml"

  | 7 ->
let
# 192 "src/languages/smtlib2/poly/lexer.mll"
               s
# 451 "src/languages/smtlib2/poly/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 192 "src/languages/smtlib2/poly/lexer.mll"
                        ( DEC s )
# 455 "src/languages/smtlib2/poly/lexer.ml"

  | 8 ->
let
# 193 "src/languages/smtlib2/poly/lexer.mll"
                   s
# 461 "src/languages/smtlib2/poly/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 193 "src/languages/smtlib2/poly/lexer.mll"
                        ( HEX s )
# 465 "src/languages/smtlib2/poly/lexer.ml"

  | 9 ->
let
# 194 "src/languages/smtlib2/poly/lexer.mll"
              s
# 471 "src/languages/smtlib2/poly/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 194 "src/languages/smtlib2/poly/lexer.mll"
                        ( BIN s )
# 475 "src/languages/smtlib2/poly/lexer.ml"

  | 10 ->
# 195 "src/languages/smtlib2/poly/lexer.mll"
                        ( string newline (Buffer.create 42) lexbuf )
# 480 "src/languages/smtlib2/poly/lexer.ml"

  | 11 ->
let
# 196 "src/languages/smtlib2/poly/lexer.mll"
               s
# 486 "src/languages/smtlib2/poly/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 196 "src/languages/smtlib2/poly/lexer.mll"
                        ( KEYWORD s )
# 490 "src/languages/smtlib2/poly/lexer.ml"

  | 12 ->
let
# 197 "src/languages/smtlib2/poly/lexer.mll"
                     s
# 496 "src/languages/smtlib2/poly/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 197 "src/languages/smtlib2/poly/lexer.mll"
                                        ( symbol newline lexbuf s )
# 500 "src/languages/smtlib2/poly/lexer.ml"

  | 13 ->
let
# 198 "src/languages/smtlib2/poly/lexer.mll"
                                s
# 506 "src/languages/smtlib2/poly/lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 198 "src/languages/smtlib2/poly/lexer.mll"
                                        ( quoted_symbol newline lexbuf s )
# 510 "src/languages/smtlib2/poly/lexer.ml"

  | 14 ->
# 199 "src/languages/smtlib2/poly/lexer.mll"
                                        ( raise Error )
# 515 "src/languages/smtlib2/poly/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec newline lexbuf __ocaml_lex_state

and string newline b lexbuf =
   __ocaml_lex_string_rec newline b lexbuf 25
and __ocaml_lex_string_rec newline b lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 202 "src/languages/smtlib2/poly/lexer.mll"
                        ( Buffer.add_char b '"'; string newline b lexbuf )
# 527 "src/languages/smtlib2/poly/lexer.ml"

  | 1 ->
# 203 "src/languages/smtlib2/poly/lexer.mll"
                        ( STR (Buffer.contents b) )
# 532 "src/languages/smtlib2/poly/lexer.ml"

  | 2 ->
let
# 204 "src/languages/smtlib2/poly/lexer.mll"
                                           c
# 538 "src/languages/smtlib2/poly/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 205 "src/languages/smtlib2/poly/lexer.mll"
    ( if c = '\n' then newline lexbuf;
      Buffer.add_char b c; string newline b lexbuf )
# 543 "src/languages/smtlib2/poly/lexer.ml"

  | 3 ->
# 207 "src/languages/smtlib2/poly/lexer.mll"
                        ( raise Error )
# 548 "src/languages/smtlib2/poly/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec newline b lexbuf __ocaml_lex_state

;;

