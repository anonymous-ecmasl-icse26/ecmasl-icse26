# 3 "src/semantics/extended/parser/eLexer.mll"
 
  open Lexing
  open EParser

  let keywords = Hashtbl.of_seq @@ List.to_seq
          [
            (* Language values *)
            "null"                    , NULL;
            "None"                    , NONE;

            (* Language constructs *)
            "let"                     , LET;
            "import"                  , IMPORT;
            "typedef"                 , TYPEDEF;
            "macro"                   , MACRO;
            "function"                , FUNCTION;
            "advice"                  , ADVICE;
            "before"                  , BEFORE;
            "after"                   , AFTER;
            "print"                   , PRINT;
            "return"                  , RETURN;
            "delete"                  , DELETE;
            "extern"                  , EXTERN;
            "lambda"                  , LAMBDA;
            "assert"                  , ASSERT;
            "fail"                    , FAIL;
            "throw"                   , THROW;
            "catch"                   , CATCH;
            "if"                      , IF;
            "else"                    , ELSE;
            "while"                   , WHILE;
            "foreach"                 , FOREACH;
            "repeat"                  , REPEAT;
            "until"                   , UNTIL;
            "switch"                  , SWITCH;
            "case"                    , CASE;
            "default"                 , DEFAULT;
            "match"                   , MATCH;
            "with"                    , WITH;

            (* List operators *)
            "hd"                      , LIST_HEAD;
            "tl"                      , LIST_TAIL;

            (* Type operators *)
            "typeof"                  , TYPEOF;
            "int_to_float"            , INT_TO_FLOAT;
            "int_to_string"           , INT_TO_STRING;
            "float_to_int"            , FLOAT_TO_INT;
            "float_to_string"         , FLOAT_TO_STRING;
            "string_to_int"           , STRING_TO_INT;
            "string_to_float"         , STRING_TO_FLOAT;

            (* Object operators *)
            "obj_to_list"             , OBJECT_TO_LIST;
            "obj_fields"              , OBJECT_FIELDS;
            "in_obj"                  , OBJECT_MEM;

            (* Type system *)
            "any"                     , TYPE_ANY;
            "unknown"                 , TYPE_UNKNOWN;
            "never"                   , TYPE_NEVER;
            "undefined"               , TYPE_UNDEFINED;
            "void"                    , TYPE_VOID;
            "int"                     , TYPE_INT;
            "float"                   , TYPE_FLOAT;
            "string"                  , TYPE_STRING;
            "boolean"                 , TYPE_BOOLEAN;
            "symbol"                  , TYPE_SYMBOL;
            "sigma"                   , TYPE_SIGMA;

            (* FIXME: (Math constants) Should go to the stdlib? *)
            "NaN"                     , FLOAT (Float.nan);
            "Infinity"                , FLOAT (Float.infinity);
            "MaxValue"                , FLOAT (Float.max_float);
            "MinValue"                , FLOAT (5e-324);
            "Pi"                      , FLOAT (Float.pi);
          ]

  exception Syntax_error of string

  let create_string (lexbuf : Lexing.lexbuf) (read_string : Lexing.lexbuf -> token): token =
    let start_p = lexbuf.lex_start_p in
    let token = read_string lexbuf in
    lexbuf.lex_start_p <- start_p;
    token

  let create_syntax_error ?(eof=false) (msg : string) (lexbuf : Lexing.lexbuf) : exn =
    let c = Lexing.lexeme lexbuf in
    let formatted_msg = (
      match eof with
      | true  -> Printf.sprintf "%s. Line number: %d. File: %s" msg (lexbuf.lex_curr_p.pos_lnum) (lexbuf.lex_curr_p.pos_fname)
      | false -> Printf.sprintf "%s: %s. Line number: %d. File: %s" msg c (lexbuf.lex_curr_p.pos_lnum) (lexbuf.lex_curr_p.pos_fname)
    ) in (Syntax_error formatted_msg)

# 98 "src/semantics/extended/parser/eLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\202\255\203\255\082\000\192\000\020\001\104\001\181\001\
    \203\001\213\255\067\000\080\000\227\255\003\002\054\000\230\255\
    \232\255\131\000\054\000\236\255\081\000\238\255\239\255\240\255\
    \241\255\242\255\243\255\244\255\157\000\246\255\247\255\082\000\
    \214\001\083\000\252\255\253\255\254\255\001\000\206\000\248\255\
    \173\000\080\002\191\001\236\001\219\255\246\001\245\255\218\255\
    \231\255\204\255\205\255\107\000\221\255\117\002\022\000\220\255\
    \207\255\193\000\215\255\226\255\214\255\112\000\224\255\197\002\
    \207\002\217\002\016\003\001\002\090\002\136\000\054\003\138\003\
    \222\003\050\004\134\004\218\004\240\002\250\002\046\005\137\000\
    \058\003\241\255\103\005\135\005\255\255\094\000\122\005\246\255\
    \247\255\248\255\249\255\250\255\251\255\252\255\253\255\254\255\
    \208\005\245\255\231\005\013\006\039\006\077\006\100\006\244\255\
    \138\006\095\000\017\001\254\255\255\255\002\000\153\001\252\255\
    \253\255\254\255\004\000\186\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\052\000\047\000\047\000\047\000\043\000\
    \043\000\255\255\039\000\038\000\255\255\027\000\026\000\255\255\
    \255\255\022\000\021\000\255\255\018\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\020\000\255\255\255\255\006\000\
    \005\000\004\000\255\255\255\255\255\255\001\000\000\000\255\255\
    \255\255\045\000\045\000\255\255\255\255\043\000\255\255\255\255\
    \255\255\255\255\255\255\032\000\255\255\255\255\033\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\030\000\255\255\255\255\
    \045\000\255\255\044\000\045\000\255\255\047\000\047\000\047\000\
    \046\000\047\000\047\000\047\000\049\000\255\255\049\000\049\000\
    \255\255\255\255\012\000\013\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\001\000\002\000\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\000\000\
    \000\000\255\255\255\255\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\255\255\000\000\000\000\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \082\000\000\000\082\000\255\255\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\107\000\000\000\000\000\255\255\112\000\000\000\
    \000\000\000\000\255\255\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\038\000\036\000\036\000\108\000\037\000\113\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \038\000\020\000\009\000\029\000\000\000\016\000\014\000\003\000\
    \027\000\026\000\018\000\019\000\035\000\028\000\032\000\017\000\
    \008\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\033\000\034\000\011\000\031\000\010\000\021\000\
    \030\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\023\000\051\000\022\000\012\000\004\000\
    \048\000\004\000\004\000\004\000\004\000\004\000\005\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\006\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\025\000\013\000\024\000\015\000\077\000\
    \060\000\061\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\059\000\058\000\047\000\044\000\
    \039\000\052\000\055\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\049\000\062\000\069\000\
    \079\000\078\000\050\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\038\000\
    \043\000\098\000\043\000\046\000\103\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\069\000\
    \057\000\116\000\000\000\000\000\000\000\000\000\038\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\108\000\000\000\000\000\109\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\069\000\000\000\056\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\
    \000\000\000\000\000\000\004\000\000\000\073\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\069\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\113\000\000\000\000\000\114\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\115\000\000\000\000\000\000\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\070\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\064\000\000\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\064\000\063\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\000\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \063\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\063\000\040\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \063\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\040\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\065\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\000\000\000\000\
    \000\000\000\000\053\000\000\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\000\000\054\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\000\000\040\000\000\000\000\000\
    \000\000\111\000\000\000\000\000\057\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\040\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \000\000\000\000\000\000\000\000\053\000\000\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \068\000\056\000\068\000\000\000\000\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\000\000\063\000\000\000\000\000\000\000\
    \000\000\000\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\063\000\000\000\000\000\000\000\
    \000\000\000\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\066\000\066\000\066\000\066\000\066\000\066\000\000\000\
    \000\000\000\000\000\000\000\000\084\000\069\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \000\000\066\000\066\000\066\000\066\000\066\000\066\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\004\000\083\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\071\000\004\000\004\000\004\000\004\000\
    \004\000\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
    \000\000\004\000\000\000\004\000\004\000\004\000\004\000\072\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\069\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\000\000\081\000\000\000\000\000\004\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
    \000\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\074\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\069\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\004\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\075\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\000\000\000\000\000\000\
    \000\000\004\000\000\000\004\000\004\000\004\000\004\000\072\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\079\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\255\255\000\000\000\000\000\000\078\000\000\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\087\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\000\000\000\000\000\000\090\000\
    \000\000\000\000\000\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\000\000\000\000\095\000\000\000\000\000\000\000\000\000\
    \000\000\094\000\000\000\000\000\000\000\088\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\093\000\000\000\000\000\
    \000\000\092\000\000\000\091\000\085\000\089\000\000\000\086\000\
    \097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
    \097\000\097\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\097\000\097\000\097\000\097\000\097\000\097\000\099\000\
    \099\000\099\000\099\000\099\000\099\000\099\000\099\000\099\000\
    \099\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \099\000\099\000\099\000\099\000\099\000\099\000\000\000\000\000\
    \000\000\097\000\097\000\097\000\097\000\097\000\097\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\100\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\000\000\
    \099\000\099\000\099\000\099\000\099\000\099\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\000\000\000\000\000\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\101\000\
    \101\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \101\000\101\000\101\000\101\000\101\000\101\000\100\000\100\000\
    \100\000\100\000\100\000\100\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\102\000\102\000\102\000\
    \102\000\102\000\102\000\102\000\102\000\102\000\102\000\000\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\102\000\102\000\
    \102\000\102\000\102\000\102\000\104\000\104\000\104\000\104\000\
    \104\000\104\000\104\000\104\000\104\000\104\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\104\000\104\000\104\000\
    \104\000\104\000\104\000\000\000\000\000\000\000\102\000\102\000\
    \102\000\102\000\102\000\102\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\105\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\105\000\105\000\105\000\000\000\104\000\104\000\104\000\
    \104\000\104\000\104\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\103\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\105\000\105\000\105\000\105\000\105\000\
    \105\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\103\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\037\000\109\000\000\000\114\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\
    \018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \010\000\010\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\011\000\011\000\020\000\031\000\
    \033\000\051\000\054\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\017\000\061\000\069\000\
    \079\000\003\000\017\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\038\000\
    \040\000\085\000\040\000\028\000\105\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\004\000\
    \057\000\115\000\255\255\255\255\255\255\255\255\038\000\255\255\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\106\000\255\255\255\255\106\000\004\000\
    \255\255\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\005\000\255\255\057\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\255\255\
    \255\255\255\255\255\255\005\000\255\255\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\255\255\110\000\255\255\255\255\110\000\255\255\
    \255\255\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\110\000\255\255\255\255\255\255\006\000\
    \255\255\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\007\000\255\255\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
    \042\000\008\000\007\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\255\255\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \008\000\106\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\007\000\032\000\043\000\043\000\043\000\043\000\
    \043\000\043\000\043\000\043\000\043\000\043\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
    \008\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\032\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\008\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\255\255\255\255\
    \255\255\255\255\013\000\255\255\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\255\255\013\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\255\255\041\000\255\255\255\255\
    \255\255\110\000\255\255\255\255\053\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\041\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \255\255\255\255\255\255\255\255\053\000\255\255\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
    \063\000\053\000\063\000\255\255\255\255\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\255\255\064\000\255\255\255\255\255\255\
    \255\255\255\255\065\000\065\000\065\000\065\000\065\000\065\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\064\000\255\255\255\255\255\255\
    \255\255\255\255\065\000\065\000\065\000\065\000\065\000\065\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\066\000\066\000\066\000\066\000\066\000\066\000\255\255\
    \255\255\255\255\255\255\255\255\080\000\070\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \255\255\066\000\066\000\066\000\066\000\066\000\066\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\255\255\255\255\255\255\255\255\070\000\080\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\071\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\255\255\255\255\255\255\
    \255\255\071\000\255\255\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\072\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\255\255\080\000\255\255\255\255\072\000\255\255\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\073\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\255\255\255\255\255\255\
    \255\255\073\000\255\255\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\074\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\255\255\255\255\255\255\255\255\074\000\255\255\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\075\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\255\255\255\255\255\255\
    \255\255\075\000\255\255\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\078\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\082\000\255\255\255\255\255\255\078\000\255\255\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\083\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\086\000\086\000\255\255\255\255\255\255\083\000\
    \255\255\255\255\255\255\086\000\086\000\086\000\086\000\086\000\
    \086\000\255\255\255\255\082\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\086\000\086\000\086\000\086\000\086\000\
    \086\000\255\255\255\255\083\000\255\255\255\255\255\255\255\255\
    \255\255\083\000\255\255\255\255\255\255\083\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\083\000\255\255\255\255\
    \255\255\083\000\255\255\083\000\083\000\083\000\255\255\083\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\096\000\096\000\096\000\096\000\096\000\096\000\098\000\
    \098\000\098\000\098\000\098\000\098\000\098\000\098\000\098\000\
    \098\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \098\000\098\000\098\000\098\000\098\000\098\000\255\255\255\255\
    \255\255\096\000\096\000\096\000\096\000\096\000\096\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\099\000\099\000\099\000\
    \099\000\099\000\099\000\099\000\099\000\099\000\099\000\255\255\
    \098\000\098\000\098\000\098\000\098\000\098\000\099\000\099\000\
    \099\000\099\000\099\000\099\000\255\255\255\255\255\255\100\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
    \100\000\255\255\255\255\255\255\255\255\255\255\255\255\082\000\
    \100\000\100\000\100\000\100\000\100\000\100\000\099\000\099\000\
    \099\000\099\000\099\000\099\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\101\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\101\000\101\000\101\000\255\255\
    \100\000\100\000\100\000\100\000\100\000\100\000\101\000\101\000\
    \101\000\101\000\101\000\101\000\102\000\102\000\102\000\102\000\
    \102\000\102\000\102\000\102\000\102\000\102\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\102\000\102\000\102\000\
    \102\000\102\000\102\000\255\255\255\255\255\255\101\000\101\000\
    \101\000\101\000\101\000\101\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\104\000\104\000\104\000\104\000\104\000\104\000\
    \104\000\104\000\104\000\104\000\255\255\102\000\102\000\102\000\
    \102\000\102\000\102\000\104\000\104\000\104\000\104\000\104\000\
    \104\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\102\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\104\000\104\000\104\000\104\000\104\000\
    \104\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\104\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec read lexbuf =
   __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 124 "src/semantics/extended/parser/eLexer.mll"
                      ( read lexbuf )
# 655 "src/semantics/extended/parser/eLexer.ml"

  | 1 ->
# 125 "src/semantics/extended/parser/eLexer.mll"
                      ( new_line lexbuf; read lexbuf )
# 660 "src/semantics/extended/parser/eLexer.ml"

  | 2 ->
# 126 "src/semantics/extended/parser/eLexer.mll"
                      ( COMMA )
# 665 "src/semantics/extended/parser/eLexer.ml"

  | 3 ->
# 127 "src/semantics/extended/parser/eLexer.mll"
                      ( SEMICOLON )
# 670 "src/semantics/extended/parser/eLexer.ml"

  | 4 ->
# 128 "src/semantics/extended/parser/eLexer.mll"
                      ( COLON )
# 675 "src/semantics/extended/parser/eLexer.ml"

  | 5 ->
# 129 "src/semantics/extended/parser/eLexer.mll"
                      ( PERIOD )
# 680 "src/semantics/extended/parser/eLexer.ml"

  | 6 ->
# 130 "src/semantics/extended/parser/eLexer.mll"
                      ( DEFEQ0 )
# 685 "src/semantics/extended/parser/eLexer.ml"

  | 7 ->
# 131 "src/semantics/extended/parser/eLexer.mll"
                      ( DEFEQ )
# 690 "src/semantics/extended/parser/eLexer.ml"

  | 8 ->
# 132 "src/semantics/extended/parser/eLexer.mll"
                      ( ATSIGN )
# 695 "src/semantics/extended/parser/eLexer.ml"

  | 9 ->
# 133 "src/semantics/extended/parser/eLexer.mll"
                      ( HASH )
# 700 "src/semantics/extended/parser/eLexer.ml"

  | 10 ->
# 134 "src/semantics/extended/parser/eLexer.mll"
                      ( ARROW )
# 705 "src/semantics/extended/parser/eLexer.ml"

  | 11 ->
# 135 "src/semantics/extended/parser/eLexer.mll"
                      ( LPAREN )
# 710 "src/semantics/extended/parser/eLexer.ml"

  | 12 ->
# 136 "src/semantics/extended/parser/eLexer.mll"
                      ( RPAREN )
# 715 "src/semantics/extended/parser/eLexer.ml"

  | 13 ->
# 137 "src/semantics/extended/parser/eLexer.mll"
                      ( LBRACE )
# 720 "src/semantics/extended/parser/eLexer.ml"

  | 14 ->
# 138 "src/semantics/extended/parser/eLexer.mll"
                      ( RBRACE )
# 725 "src/semantics/extended/parser/eLexer.ml"

  | 15 ->
# 139 "src/semantics/extended/parser/eLexer.mll"
                      ( LBRACK )
# 730 "src/semantics/extended/parser/eLexer.ml"

  | 16 ->
# 140 "src/semantics/extended/parser/eLexer.mll"
                      ( RBRACK )
# 735 "src/semantics/extended/parser/eLexer.ml"

  | 17 ->
# 141 "src/semantics/extended/parser/eLexer.mll"
                      ( QUESTION )
# 740 "src/semantics/extended/parser/eLexer.ml"

  | 18 ->
# 142 "src/semantics/extended/parser/eLexer.mll"
                      ( EXCLAMATION )
# 745 "src/semantics/extended/parser/eLexer.ml"

  | 19 ->
# 143 "src/semantics/extended/parser/eLexer.mll"
                      ( PLUS )
# 750 "src/semantics/extended/parser/eLexer.ml"

  | 20 ->
# 144 "src/semantics/extended/parser/eLexer.mll"
                      ( MINUS )
# 755 "src/semantics/extended/parser/eLexer.ml"

  | 21 ->
# 145 "src/semantics/extended/parser/eLexer.mll"
                      ( TIMES )
# 760 "src/semantics/extended/parser/eLexer.ml"

  | 22 ->
# 146 "src/semantics/extended/parser/eLexer.mll"
                      ( DIVIDE )
# 765 "src/semantics/extended/parser/eLexer.ml"

  | 23 ->
# 147 "src/semantics/extended/parser/eLexer.mll"
                      ( MODULO )
# 770 "src/semantics/extended/parser/eLexer.ml"

  | 24 ->
# 148 "src/semantics/extended/parser/eLexer.mll"
                      ( POW )
# 775 "src/semantics/extended/parser/eLexer.ml"

  | 25 ->
# 149 "src/semantics/extended/parser/eLexer.mll"
                      ( TILDE )
# 780 "src/semantics/extended/parser/eLexer.ml"

  | 26 ->
# 150 "src/semantics/extended/parser/eLexer.mll"
                      ( AMPERSAND )
# 785 "src/semantics/extended/parser/eLexer.ml"

  | 27 ->
# 151 "src/semantics/extended/parser/eLexer.mll"
                      ( PIPE )
# 790 "src/semantics/extended/parser/eLexer.ml"

  | 28 ->
# 152 "src/semantics/extended/parser/eLexer.mll"
                      ( CARET )
# 795 "src/semantics/extended/parser/eLexer.ml"

  | 29 ->
# 153 "src/semantics/extended/parser/eLexer.mll"
                      ( SHIFT_LEFT )
# 800 "src/semantics/extended/parser/eLexer.ml"

  | 30 ->
# 154 "src/semantics/extended/parser/eLexer.mll"
                      ( SHIFT_RIGHT )
# 805 "src/semantics/extended/parser/eLexer.ml"

  | 31 ->
# 155 "src/semantics/extended/parser/eLexer.mll"
                      ( SHIFT_RIGHT_LOGICAL )
# 810 "src/semantics/extended/parser/eLexer.ml"

  | 32 ->
# 156 "src/semantics/extended/parser/eLexer.mll"
                      ( LAND )
# 815 "src/semantics/extended/parser/eLexer.ml"

  | 33 ->
# 157 "src/semantics/extended/parser/eLexer.mll"
                    ( LOR )
# 820 "src/semantics/extended/parser/eLexer.ml"

  | 34 ->
# 158 "src/semantics/extended/parser/eLexer.mll"
                      ( SCLAND )
# 825 "src/semantics/extended/parser/eLexer.ml"

  | 35 ->
# 159 "src/semantics/extended/parser/eLexer.mll"
                      ( SCLOR )
# 830 "src/semantics/extended/parser/eLexer.ml"

  | 36 ->
# 160 "src/semantics/extended/parser/eLexer.mll"
                      ( EQ )
# 835 "src/semantics/extended/parser/eLexer.ml"

  | 37 ->
# 161 "src/semantics/extended/parser/eLexer.mll"
                      ( NE )
# 840 "src/semantics/extended/parser/eLexer.ml"

  | 38 ->
# 162 "src/semantics/extended/parser/eLexer.mll"
                      ( LT )
# 845 "src/semantics/extended/parser/eLexer.ml"

  | 39 ->
# 163 "src/semantics/extended/parser/eLexer.mll"
                      ( GT )
# 850 "src/semantics/extended/parser/eLexer.ml"

  | 40 ->
# 164 "src/semantics/extended/parser/eLexer.mll"
                      ( LE )
# 855 "src/semantics/extended/parser/eLexer.ml"

  | 41 ->
# 165 "src/semantics/extended/parser/eLexer.mll"
                      ( GE )
# 860 "src/semantics/extended/parser/eLexer.ml"

  | 42 ->
# 166 "src/semantics/extended/parser/eLexer.mll"
                      ( create_string lexbuf (read_string (Buffer.create 16)) )
# 865 "src/semantics/extended/parser/eLexer.ml"

  | 43 ->
# 167 "src/semantics/extended/parser/eLexer.mll"
                      ( INT (int_of_string (Lexing.lexeme lexbuf)) )
# 870 "src/semantics/extended/parser/eLexer.ml"

  | 44 ->
# 168 "src/semantics/extended/parser/eLexer.mll"
                      ( INT (int_of_string (Lexing.lexeme lexbuf)) )
# 875 "src/semantics/extended/parser/eLexer.ml"

  | 45 ->
# 169 "src/semantics/extended/parser/eLexer.mll"
                      ( FLOAT (float_of_string (Lexing.lexeme lexbuf)) )
# 880 "src/semantics/extended/parser/eLexer.ml"

  | 46 ->
# 170 "src/semantics/extended/parser/eLexer.mll"
                      ( BOOLEAN (bool_of_string (Lexing.lexeme lexbuf)) )
# 885 "src/semantics/extended/parser/eLexer.ml"

  | 47 ->
let
# 171 "src/semantics/extended/parser/eLexer.mll"
          x
# 891 "src/semantics/extended/parser/eLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 171 "src/semantics/extended/parser/eLexer.mll"
                      ( try Hashtbl.find keywords x with Not_found -> ID x )
# 895 "src/semantics/extended/parser/eLexer.ml"

  | 48 ->
# 172 "src/semantics/extended/parser/eLexer.mll"
                      ( GID (String_utils.trim_ends (Lexing.lexeme lexbuf)))
# 900 "src/semantics/extended/parser/eLexer.ml"

  | 49 ->
# 173 "src/semantics/extended/parser/eLexer.mll"
                      ( SYMBOL (String_utils.chop_first_char (Lexing.lexeme lexbuf)) )
# 905 "src/semantics/extended/parser/eLexer.ml"

  | 50 ->
# 174 "src/semantics/extended/parser/eLexer.mll"
                      ( read_line_comment lexbuf )
# 910 "src/semantics/extended/parser/eLexer.ml"

  | 51 ->
# 175 "src/semantics/extended/parser/eLexer.mll"
                      ( read_block_comment lexbuf )
# 915 "src/semantics/extended/parser/eLexer.ml"

  | 52 ->
# 176 "src/semantics/extended/parser/eLexer.mll"
                      ( raise (create_syntax_error "Unexpected char" lexbuf) )
# 920 "src/semantics/extended/parser/eLexer.ml"

  | 53 ->
# 177 "src/semantics/extended/parser/eLexer.mll"
                      ( EOF )
# 925 "src/semantics/extended/parser/eLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

and read_string buf lexbuf =
   __ocaml_lex_read_string_rec buf lexbuf 80
and __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 183 "src/semantics/extended/parser/eLexer.mll"
                          ( STRING (Buffer.contents buf)                         )
# 937 "src/semantics/extended/parser/eLexer.ml"

  | 1 ->
# 184 "src/semantics/extended/parser/eLexer.mll"
                          ( Buffer.add_char buf '\\';    read_string buf lexbuf  )
# 942 "src/semantics/extended/parser/eLexer.ml"

  | 2 ->
# 185 "src/semantics/extended/parser/eLexer.mll"
                          ( Buffer.add_char buf '\b';    read_string buf lexbuf  )
# 947 "src/semantics/extended/parser/eLexer.ml"

  | 3 ->
# 186 "src/semantics/extended/parser/eLexer.mll"
                          ( Buffer.add_char buf '\n';    read_string buf lexbuf  )
# 952 "src/semantics/extended/parser/eLexer.ml"

  | 4 ->
# 187 "src/semantics/extended/parser/eLexer.mll"
                          ( Buffer.add_char buf '\r';    read_string buf lexbuf  )
# 957 "src/semantics/extended/parser/eLexer.ml"

  | 5 ->
# 188 "src/semantics/extended/parser/eLexer.mll"
                          ( Buffer.add_char buf '\t';    read_string buf lexbuf  )
# 962 "src/semantics/extended/parser/eLexer.ml"

  | 6 ->
# 189 "src/semantics/extended/parser/eLexer.mll"
                          ( Buffer.add_char buf '\000';  read_string buf lexbuf  )
# 967 "src/semantics/extended/parser/eLexer.ml"

  | 7 ->
# 190 "src/semantics/extended/parser/eLexer.mll"
                          ( Buffer.add_char buf '\011';  read_string buf lexbuf  )
# 972 "src/semantics/extended/parser/eLexer.ml"

  | 8 ->
# 191 "src/semantics/extended/parser/eLexer.mll"
                          ( Buffer.add_char buf '\012';  read_string buf lexbuf  )
# 977 "src/semantics/extended/parser/eLexer.ml"

  | 9 ->
# 192 "src/semantics/extended/parser/eLexer.mll"
                          ( Buffer.add_char buf '\"';    read_string buf lexbuf  )
# 982 "src/semantics/extended/parser/eLexer.ml"

  | 10 ->
let
# 193 "src/semantics/extended/parser/eLexer.mll"
                                    h
# 988 "src/semantics/extended/parser/eLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 4) in
# 194 "src/semantics/extended/parser/eLexer.mll"
                          (
                            Buffer.add_string buf (String_utils.hexdecode h);
                            read_string buf lexbuf
                          )
# 995 "src/semantics/extended/parser/eLexer.ml"

  | 11 ->
let
# 198 "src/semantics/extended/parser/eLexer.mll"
                                                                                      h
# 1001 "src/semantics/extended/parser/eLexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 199 "src/semantics/extended/parser/eLexer.mll"
                          (
                            Buffer.add_string buf (String_utils.utf8decode h);
                            read_string buf lexbuf
                          )
# 1008 "src/semantics/extended/parser/eLexer.ml"

  | 12 ->
# 203 "src/semantics/extended/parser/eLexer.mll"
                          (
                            Buffer.add_string buf (Lexing.lexeme lexbuf);
                            read_string buf lexbuf
                          )
# 1016 "src/semantics/extended/parser/eLexer.ml"

  | 13 ->
# 207 "src/semantics/extended/parser/eLexer.mll"
                          ( raise (create_syntax_error "Illegal string character" lexbuf) )
# 1021 "src/semantics/extended/parser/eLexer.ml"

  | 14 ->
# 208 "src/semantics/extended/parser/eLexer.mll"
                          ( raise (create_syntax_error ~eof:true "String is not terminated" lexbuf) )
# 1026 "src/semantics/extended/parser/eLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state

and read_line_comment lexbuf =
   __ocaml_lex_read_line_comment_rec lexbuf 106
and __ocaml_lex_read_line_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 214 "src/semantics/extended/parser/eLexer.mll"
              ( new_line lexbuf; read lexbuf )
# 1038 "src/semantics/extended/parser/eLexer.ml"

  | 1 ->
# 215 "src/semantics/extended/parser/eLexer.mll"
              ( read_line_comment lexbuf )
# 1043 "src/semantics/extended/parser/eLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_line_comment_rec lexbuf __ocaml_lex_state

and read_block_comment lexbuf =
   __ocaml_lex_read_block_comment_rec lexbuf 110
and __ocaml_lex_read_block_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 219 "src/semantics/extended/parser/eLexer.mll"
              ( read lexbuf )
# 1055 "src/semantics/extended/parser/eLexer.ml"

  | 1 ->
# 220 "src/semantics/extended/parser/eLexer.mll"
              ( new_line lexbuf; read_block_comment lexbuf )
# 1060 "src/semantics/extended/parser/eLexer.ml"

  | 2 ->
# 221 "src/semantics/extended/parser/eLexer.mll"
              ( read_block_comment lexbuf )
# 1065 "src/semantics/extended/parser/eLexer.ml"

  | 3 ->
# 222 "src/semantics/extended/parser/eLexer.mll"
              ( raise (create_syntax_error ~eof:true "Comment is not terminated" lexbuf))
# 1070 "src/semantics/extended/parser/eLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_block_comment_rec lexbuf __ocaml_lex_state

;;

