
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20240715

module MenhirBasics = struct
  
  exception Error
  
  let _eRR =
    fun _s ->
      raise Error
  
  type token = 
    | WITH
    | WHILE
    | UNTIL
    | TYPE_VOID
    | TYPE_UNKNOWN
    | TYPE_UNDEFINED
    | TYPE_SYMBOL
    | TYPE_STRING
    | TYPE_SIGMA
    | TYPE_NEVER
    | TYPE_INT
    | TYPE_FLOAT
    | TYPE_BOOLEAN
    | TYPE_ANY
    | TYPEOF
    | TYPEDEF
    | TIMES
    | TILDE
    | THROW
    | SYMBOL of (
# 19 "src/semantics/extended/parser/eParser.mly"
       (string)
# 39 "src/semantics/extended/parser/eParser.ml"
  )
    | SWITCH
    | STRING_TO_INT
    | STRING_TO_FLOAT
    | STRING of (
# 17 "src/semantics/extended/parser/eParser.mly"
       (string)
# 47 "src/semantics/extended/parser/eParser.ml"
  )
    | SHIFT_RIGHT_LOGICAL
    | SHIFT_RIGHT
    | SHIFT_LEFT
    | SEMICOLON
    | SCLOR
    | SCLAND
    | RPAREN
    | RETURN
    | REPEAT
    | RBRACK
    | RBRACE
    | QUESTION
    | PRINT
    | POW
    | PLUS
    | PIPE
    | PERIOD
    | OBJECT_TO_LIST
    | OBJECT_MEM
    | OBJECT_FIELDS
    | NULL
    | NONE
    | NE
    | MODULO
    | MINUS
    | MATCH
    | MACRO
    | LT
    | LPAREN
    | LOR
    | LIST_TAIL
    | LIST_HEAD
    | LET
    | LE
    | LBRACK
    | LBRACE
    | LAND
    | LAMBDA
    | INT_TO_STRING
    | INT_TO_FLOAT
    | INT of (
# 15 "src/semantics/extended/parser/eParser.mly"
       (int)
# 92 "src/semantics/extended/parser/eParser.ml"
  )
    | IMPORT
    | IF
    | ID of (
# 20 "src/semantics/extended/parser/eParser.mly"
       (string)
# 99 "src/semantics/extended/parser/eParser.ml"
  )
    | HASH
    | GT
    | GID of (
# 21 "src/semantics/extended/parser/eParser.mly"
       (string)
# 106 "src/semantics/extended/parser/eParser.ml"
  )
    | GE
    | FUNCTION
    | FOREACH
    | FLOAT_TO_STRING
    | FLOAT_TO_INT
    | FLOAT of (
# 16 "src/semantics/extended/parser/eParser.mly"
       (float)
# 116 "src/semantics/extended/parser/eParser.ml"
  )
    | FAIL
    | EXTERN
    | EXCLAMATION
    | EQ
    | EOF
    | ELSE
    | DIVIDE
    | DELETE
    | DEFEQ0
    | DEFEQ
    | DEFAULT
    | COMMA
    | COLON
    | CATCH
    | CASE
    | CARET
    | BOOLEAN of (
# 18 "src/semantics/extended/parser/eParser.mly"
       (bool)
# 137 "src/semantics/extended/parser/eParser.ml"
  )
    | BEFORE
    | ATSIGN
    | ASSERT
    | ARROW
    | AMPERSAND
    | AFTER
    | ADVICE
  
end

include MenhirBasics

# 5 "src/semantics/extended/parser/eParser.mly"
  
  open EslSyntax
  open EslSyntax.Source
  open Parsing_utils

  let fresh_lambda_id_gen = EslBase.Base.make_name_generator "__lambda__"

# 159 "src/semantics/extended/parser/eParser.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | ADVICE ->
          101
      | AFTER ->
          100
      | AMPERSAND ->
          99
      | ARROW ->
          98
      | ASSERT ->
          97
      | ATSIGN ->
          96
      | BEFORE ->
          95
      | BOOLEAN _ ->
          94
      | CARET ->
          93
      | CASE ->
          92
      | CATCH ->
          91
      | COLON ->
          90
      | COMMA ->
          89
      | DEFAULT ->
          88
      | DEFEQ ->
          87
      | DEFEQ0 ->
          86
      | DELETE ->
          85
      | DIVIDE ->
          84
      | ELSE ->
          83
      | EOF ->
          82
      | EQ ->
          81
      | EXCLAMATION ->
          80
      | EXTERN ->
          79
      | FAIL ->
          78
      | FLOAT _ ->
          77
      | FLOAT_TO_INT ->
          76
      | FLOAT_TO_STRING ->
          75
      | FOREACH ->
          74
      | FUNCTION ->
          73
      | GE ->
          72
      | GID _ ->
          71
      | GT ->
          70
      | HASH ->
          69
      | ID _ ->
          68
      | IF ->
          67
      | IMPORT ->
          66
      | INT _ ->
          65
      | INT_TO_FLOAT ->
          64
      | INT_TO_STRING ->
          63
      | LAMBDA ->
          62
      | LAND ->
          61
      | LBRACE ->
          60
      | LBRACK ->
          59
      | LE ->
          58
      | LET ->
          57
      | LIST_HEAD ->
          56
      | LIST_TAIL ->
          55
      | LOR ->
          54
      | LPAREN ->
          53
      | LT ->
          52
      | MACRO ->
          51
      | MATCH ->
          50
      | MINUS ->
          49
      | MODULO ->
          48
      | NE ->
          47
      | NONE ->
          46
      | NULL ->
          45
      | OBJECT_FIELDS ->
          44
      | OBJECT_MEM ->
          43
      | OBJECT_TO_LIST ->
          42
      | PERIOD ->
          41
      | PIPE ->
          40
      | PLUS ->
          39
      | POW ->
          38
      | PRINT ->
          37
      | QUESTION ->
          36
      | RBRACE ->
          35
      | RBRACK ->
          34
      | REPEAT ->
          33
      | RETURN ->
          32
      | RPAREN ->
          31
      | SCLAND ->
          30
      | SCLOR ->
          29
      | SEMICOLON ->
          28
      | SHIFT_LEFT ->
          27
      | SHIFT_RIGHT ->
          26
      | SHIFT_RIGHT_LOGICAL ->
          25
      | STRING _ ->
          24
      | STRING_TO_FLOAT ->
          23
      | STRING_TO_INT ->
          22
      | SWITCH ->
          21
      | SYMBOL _ ->
          20
      | THROW ->
          19
      | TILDE ->
          18
      | TIMES ->
          17
      | TYPEDEF ->
          16
      | TYPEOF ->
          15
      | TYPE_ANY ->
          14
      | TYPE_BOOLEAN ->
          13
      | TYPE_FLOAT ->
          12
      | TYPE_INT ->
          11
      | TYPE_NEVER ->
          10
      | TYPE_SIGMA ->
          9
      | TYPE_STRING ->
          8
      | TYPE_SYMBOL ->
          7
      | TYPE_UNDEFINED ->
          6
      | TYPE_UNKNOWN ->
          5
      | TYPE_VOID ->
          4
      | UNTIL ->
          3
      | WHILE ->
          2
      | WITH ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | ADVICE ->
          Obj.repr ()
      | AFTER ->
          Obj.repr ()
      | AMPERSAND ->
          Obj.repr ()
      | ARROW ->
          Obj.repr ()
      | ASSERT ->
          Obj.repr ()
      | ATSIGN ->
          Obj.repr ()
      | BEFORE ->
          Obj.repr ()
      | BOOLEAN _v ->
          Obj.repr _v
      | CARET ->
          Obj.repr ()
      | CASE ->
          Obj.repr ()
      | CATCH ->
          Obj.repr ()
      | COLON ->
          Obj.repr ()
      | COMMA ->
          Obj.repr ()
      | DEFAULT ->
          Obj.repr ()
      | DEFEQ ->
          Obj.repr ()
      | DEFEQ0 ->
          Obj.repr ()
      | DELETE ->
          Obj.repr ()
      | DIVIDE ->
          Obj.repr ()
      | ELSE ->
          Obj.repr ()
      | EOF ->
          Obj.repr ()
      | EQ ->
          Obj.repr ()
      | EXCLAMATION ->
          Obj.repr ()
      | EXTERN ->
          Obj.repr ()
      | FAIL ->
          Obj.repr ()
      | FLOAT _v ->
          Obj.repr _v
      | FLOAT_TO_INT ->
          Obj.repr ()
      | FLOAT_TO_STRING ->
          Obj.repr ()
      | FOREACH ->
          Obj.repr ()
      | FUNCTION ->
          Obj.repr ()
      | GE ->
          Obj.repr ()
      | GID _v ->
          Obj.repr _v
      | GT ->
          Obj.repr ()
      | HASH ->
          Obj.repr ()
      | ID _v ->
          Obj.repr _v
      | IF ->
          Obj.repr ()
      | IMPORT ->
          Obj.repr ()
      | INT _v ->
          Obj.repr _v
      | INT_TO_FLOAT ->
          Obj.repr ()
      | INT_TO_STRING ->
          Obj.repr ()
      | LAMBDA ->
          Obj.repr ()
      | LAND ->
          Obj.repr ()
      | LBRACE ->
          Obj.repr ()
      | LBRACK ->
          Obj.repr ()
      | LE ->
          Obj.repr ()
      | LET ->
          Obj.repr ()
      | LIST_HEAD ->
          Obj.repr ()
      | LIST_TAIL ->
          Obj.repr ()
      | LOR ->
          Obj.repr ()
      | LPAREN ->
          Obj.repr ()
      | LT ->
          Obj.repr ()
      | MACRO ->
          Obj.repr ()
      | MATCH ->
          Obj.repr ()
      | MINUS ->
          Obj.repr ()
      | MODULO ->
          Obj.repr ()
      | NE ->
          Obj.repr ()
      | NONE ->
          Obj.repr ()
      | NULL ->
          Obj.repr ()
      | OBJECT_FIELDS ->
          Obj.repr ()
      | OBJECT_MEM ->
          Obj.repr ()
      | OBJECT_TO_LIST ->
          Obj.repr ()
      | PERIOD ->
          Obj.repr ()
      | PIPE ->
          Obj.repr ()
      | PLUS ->
          Obj.repr ()
      | POW ->
          Obj.repr ()
      | PRINT ->
          Obj.repr ()
      | QUESTION ->
          Obj.repr ()
      | RBRACE ->
          Obj.repr ()
      | RBRACK ->
          Obj.repr ()
      | REPEAT ->
          Obj.repr ()
      | RETURN ->
          Obj.repr ()
      | RPAREN ->
          Obj.repr ()
      | SCLAND ->
          Obj.repr ()
      | SCLOR ->
          Obj.repr ()
      | SEMICOLON ->
          Obj.repr ()
      | SHIFT_LEFT ->
          Obj.repr ()
      | SHIFT_RIGHT ->
          Obj.repr ()
      | SHIFT_RIGHT_LOGICAL ->
          Obj.repr ()
      | STRING _v ->
          Obj.repr _v
      | STRING_TO_FLOAT ->
          Obj.repr ()
      | STRING_TO_INT ->
          Obj.repr ()
      | SWITCH ->
          Obj.repr ()
      | SYMBOL _v ->
          Obj.repr _v
      | THROW ->
          Obj.repr ()
      | TILDE ->
          Obj.repr ()
      | TIMES ->
          Obj.repr ()
      | TYPEDEF ->
          Obj.repr ()
      | TYPEOF ->
          Obj.repr ()
      | TYPE_ANY ->
          Obj.repr ()
      | TYPE_BOOLEAN ->
          Obj.repr ()
      | TYPE_FLOAT ->
          Obj.repr ()
      | TYPE_INT ->
          Obj.repr ()
      | TYPE_NEVER ->
          Obj.repr ()
      | TYPE_SIGMA ->
          Obj.repr ()
      | TYPE_STRING ->
          Obj.repr ()
      | TYPE_SYMBOL ->
          Obj.repr ()
      | TYPE_UNDEFINED ->
          Obj.repr ()
      | TYPE_UNKNOWN ->
          Obj.repr ()
      | TYPE_VOID ->
          Obj.repr ()
      | UNTIL ->
          Obj.repr ()
      | WHILE ->
          Obj.repr ()
      | WITH ->
          Obj.repr ()
  
  and default_reduction =
    (16, "\000\000\000\000\000\000\001\018\000\000\000\000\001\016\000\000\000\000\001\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\014\000-\000*\000\000\000\000\001\015\000\000\000\000\000\000\000\000\001\017\000W\001\r\000V\000X\000d\000\000\000\000\000B\000\000\000\000\000D\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\172\000\000\000\000\000\134\000\000\001\022\000\000\000\000\000\000\000\016\000\012\000\177\001\021\000Y\000\000\000\000\000\146\000\000\000\000\000|\000\000\000\000\000\132\000\000\000\000\000\130\000\000\000\000\000\168\000\000\000\000\000~\000\000\000\000\000\144\000\000\000\000\000\142\000\000\000\000\000\154\000\000\000\000\000\138\000\000\000\000\000\158\000\000\000\000\000\160\000\000\000\000\000\140\000\000\000\000\000\136\000\000\000\000\000\164\000\000\000\000\000\162\000\000\000\000\000\166\000\000\000\000\000\156\000\000\000\000\000\152\000\000\000\000\000\150\000\000\000\000\000\148\000\000\000\000\000\170\000\000\000C\000F\000\000\000\000\000\208\000\000\000\000\000\207\000\000\000\011\000\014\000p\000\000\000r\000\000\000l\000\000\000n\000\000\000\000\000\000\000\000\000\015\000\000\000\r\000\000\000\000\000&\000\000\000H\000\000\000Z\000\000\000\000\000$\000\000\000\000\000\000\000\227\000\210\000\000\000\000\000\173\000f\000\000\000h\000\000\000\000\000U\000\000\000T\000`\000\000\000z\000\000\000x\000\000\000v\000\000\000t\000\000\000b\000\000\000jtt\000\000\000\226\000\000\000\000\000\000\000\000\000J\000\000\000'\000\000\000\000\000\212\000\000\000\000\000\000\000\017\000\000\001\012\001\005\000\000\000\000\000\000\001\007\000\000\000\000\000\221\000\000\000\222\000\224\000\220\000\000\000\000\0001\000\b\000\000\000\000\000\201\000\000\000:\000\000\000\000\000\n
  
  and error =
    (102, "\000\001+\128\000,E\153\201\029\128\002\000\000\004\174\000\000\177\022g$v\000\b\000\000\018\184\000\002\196Y\156\145\216\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001+\128\000,E\153\201\029\128\002\000\000\004\174\000\000\177\022g$v\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000J\224\000\011\017frG`\000\128\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\184\000\002\196Y\156\145\216\000 \000\000J\224\000\011\017frG`\000\128\000\001+\128\000,E\153\201\029\128\002\000\000\004\174\000\000\177\022g$v\000\b\000\000\018\184\002\002\196Y\156\145\216\000 \000\000J\224\004\011\017frG`\000\128\000\000@v\027\209\2024\002\128H$\016\000\004\174\000\000\177\022g$v\000\b\000\000\018\184\000\002\196Y\156\145\216\000 \000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000J\224\000\011\017frG`\000\128\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001+\129\000,E\153\201\029\128\002\000\000\004\174\000\000\177\022g$v\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000J\224\000\011\017frG`\000\128\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\007b\189\028\163@(\004\128A\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\001\252\239G(\208\n\001\161\144@\000\018\184\000\002\196Y\156\145\216\000 \000\000\000\000\000\000\000\000\000\000\000\b\000\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\001\252\239G(\208\n\001\161\144@\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\031\206\244s\141\000\160\026\025\004@\000@\127;\209\2024\002\128ht\016\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\029\130\244r\141\000\160\018\t\004\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\001\252\239G(\208\n\001\161\144@\000\018\184\000\002\196Y\156\145\216\000 \000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\004\174\000\000\177\022g$v\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\031\206\244r\141\000\160\026\025\004\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\001\252\239G(\208\n\001\161\144@\000\018\184\000\002\196Y\156\145\216\000 \000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\004\174\000\000\177\022g$v\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\031\206\244r\141\000\160\026\025\004\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\001\252\239G(\208\n\001\161\144@\000\018\184\000\002\196Y\156\145\216\000 \000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\004\174\000\000\177\022g$v\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\031\206\244r\141\000\160\026\025\004\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\001\252\239G(\208\n\001\161\144@\000\018\184\000\002\196Y\156\145\216\000 \000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\004\174\000\000\177\022g$v\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\031\206\244r\141\000\160\026\025\004\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\001\252\239G(\208\n\001\161\144@\000\018\184\000\002\196Y\156\145\216\000 \000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\004\174\000\000\177\022g$v\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\031\206\244r\141\000\160\026\025\004\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\001\252\239G(\208\n\001\161\144@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\000\000\000\000\000@\000\000\004\174\000\000\177\022g$v\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\029\202\244r\141\000\160\018\017\004\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\001\001\216oG(\208\n\001 \016@\000\000\000\000\000\000@\000\000\000\000\b\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\001\252\239G(\208\n\001\161\208@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\007a\189\028\163@(\004\132A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\007a\189\028\227@(\004\130A\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\216oG(\208\n\001!\016@\000\000\000\001\000\000\000\000\000\000\004\000\000\000\000 \000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\029\194\244r\141\000\160\018\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000\000\000\000\000\000\000\000\000\000\000\000@\000@\127;\209\2024\002\128hd\016\000\000\000\000\000\000\000\000\000\000\000\000\004\000\004\007\243\189\028\163@(\006\134A\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\216/G(\208\nb\128\000\004\004\bH\004\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000?\248\"\000\002\016\016! \016\000\bb\128\000\004\004\bH\004\000\002\000\000\001\000\000@\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\015\254\b\128\000\004\004\bH\004\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\t\016\128\000\024\000\000 @\000?\248\"\000\000\016\016! \016\000\b\000\000\004\000\145\b\000\001\128\000\002\004\000\003\255\130 \000\001\001\002\018\001\000\000\128\000\000@\t\016\128\000\024\000\000 @\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\002D \000\006\000\000\b\016\000\015\254\b\128\000\004\004\bH\004\000\002\000\000\001\000$B\000\000`\000\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\b\000\001\000\000\000\004\000\003\255\130 \000\001\001\002\018\001\000\000\128\000\000@\t\016\128\000\024\000\000 @\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\004\000\000\000\016\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\002\000\003\255\130 \000\001\001\002\018\001\000\000\128\000\000@\000\016\128\000\016\000\000\000@\000?\248\"\000\000\016\016! \016\000\b\000\000\004\000\001\b\000\001\000\000\000\004\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\002\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\002D \000\006\000\000\b\016\000\000\000@\t\000\128\000\024\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\128\000\000\002\000\000\000\000\002\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\004\254#P\177\151gt\254\016\011\000\000\000\000\000\000\000@\000\000\000\000\000\000\000J\224\000\011\017frG`\000\128\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\007p\189\028\163@(\004\128A\000\000\000\000\000\000\000\000\000\000\000\000\000 \001?\136\196,e\217\221?\132\002\192\000\004\174\000\000\177\022g$v\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\031\130\244r\141\000\160\018\001\004\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\b\128\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000 \000\128\004\254#\016\177\151gt\254\016\011\000\000\018\184\128\002\196Y\156\145\216\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\248/G(\208\n\001 \016B\000\019\248\140B\198]\157\211\248@,\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\248/G(\208\n\001 \016@\000\018\184\000\002\196Y\156\145\216\000 \016\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\b\128\000\006\000\016H\004\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b \001?\136\196,e\217\221?\132\002\192\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\248/G(\208\n\001 \016B\000\019\248\141B\198]\157\211\248@,\000\000\000\000\000\000\001\000\000\000\000\000\000 \001?\136\196,e\217\221?\132\002\192\128\004\254#\016\177\151gt\254\016\011\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\004\174\000\000\177\022g$v\000\b\000\000\000\000\016\000\000\000\000\000\000\000\000\b\000O\2261\011\025vwO\225\000\176\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\007\224\189\028\163@(\004\128A\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000@\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\007`\189\028\163@(\004\128A\000\000\016\031\130\244r\141\000\160\018\001\004\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\248/G(\208\n\001 \016@\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\007\224\189\028\163@(\004\128A\000\000\016\031\134\244r\141\000\160\018A\004\000\001+\128\000,E\153\201\029\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\007\224\189\028\163@(\004\128A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@~\027\209\2064\002\128I\004\016\000\004\174\000\000\177\022o$v\000\b\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000@\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\b\000\000\000\002\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\248/G(\208\n\001 \016@\000\004\007\225\189\028\163@(\004\144A\000\000J\224\000\011\017frG`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\248/G(\208\n\001 \016@\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@w\011\209\2024\002\128H\004\016\128\004\254#\016\177\151gt\254\016\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\001?\136\212\172e\217\221?\180\138\192\128\004\254#\016\177\151gt\254\016\011\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000O\2265\011\025vwO\225\000\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\248oG(\208\n\001 \016@\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\019\248\141J\198]\157\211\251H\172\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\001\216/G(\208\n\001 \144D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\004\254#R\177\151gt\254\210+\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\007`\189\028\163@(\004\130A\b\000O\2261\011\025vwO\225\000\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\002 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000 \000\128\004\254#\016\177\151gt\254\016\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\004\000\b\016\b\000\001\000\000\000\128\000\000\000\000\b\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\004\000\000\016\b\000\001\000\000\000\000\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\001\000\000\004\002\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\016\000 @ \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000O\2261\011\025vwO\225\000\176\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\255\130 \000\001\001\002\018\001\000\000\128\000\000@\000\000\128\000\016\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    5
  
  and action =
br\030\178\000\000\t\b\030\178\000\000\t\158\030\178\000\000\n4\030\178\000\000\n\202\030\178\000\000\011`\030\178\000\000\011\246\030\178\000\000\012\140\030\178\000\000\r\"\030\178\000\000\r\184\030\178\000\000\014N\030\178\000\000\014\228\030\178\000\000\015z\030\178\000\000\016\016\030\178\000\000\016\166\030\178\000\000\017<\030\178\000\000\017\210\030\178\000\000\018h\000\000\000\000\0003\030\178\000\000\026\148\030\178\000\000\000\002\000\000\000\000\000\000\018\254\000\000\019\148\000\000\020*\000\000\020\192\026\148\0003\000S\000\000\003,\000\000\0004\030\178\000\000\029@\000\000\000\190\000\000\027\022\030\178\000\000\029\194\000\003\000*\000\000\000\000\000V\000\200\000\000\000\000\021V\000\000\021\236\000\210\000\000\029\194\000\000\000\000\022\130\000\000\023\024\000\000\023\174\000\000\024D\000\000\024\218\000\000\025p\000\000\026\006\000t\000\000\029\194\000\000\000\000\000\140\000\131\000\190\000\017\000\130\000\131\000\000\000$$x\000\000\000\000\000\000\000\000\000\000\000\186\000\131\000\242$L\000\000$x\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$x\000\152\000\000\000\164$x\000\000\000\000\000\000\026\224$x\027v$x\028\012\001$\000\000\028|$x\030\"\000\000\000\000\000\000\000\000\001\242$x \002\000\000\000\148\000\152\000\000\000\174\000\186$x\002b$x\002\228\0018\000\000\000N\000\000$v\031D\000\000\000\000\000\000\001B\000\000\000,\000+\000\000\001\244\001\024\030\178\001H\000\000\030X\000\000\001\244\030\178\000\000\031\162\001\024\001\016\000\166\030\178\000\214\001\244\030\178\000\000\000\000 8\001\244\030\178\000\000 \154\030\178\000.\000\131\000\000\001\142\000\164\000i\000*\000\224$|\000\000\001T\000\000\000\000\000\000\000\000\001T\000\000\000\186\000*\000\000\000\234$|\000\000\000\000\000\222\001\244\000\131\000\252\030\178\000\000 \252\001\244\001\024\001\244\001\244\001@\000\131\000\248\030\178\001t\001\244\030\178\000\000!^\030\178\000=\000\000\026\148!\192\000\131\000S\000\000\030\178\000\000\"\"\001|\000\000\000\000\000\000\030X\027\172\030\178\000\000\"\132\000\000\002\150\030\178\001N\000\196\000\000\001\130\000\000\000\020\000\131\000\000\001P\000r\001\132\000\000\000+\000\000\000\000\"\230\028B\030\178\000\000#H\001\152\000\000\001\160\000\000\000\000\000\000\031\162\001\244\000\000\000\000\000\005\001\244\000\000\001\244\000\000\030X\001\150\000\000\000\000\000\000\000\164\000\000\000\000\029\194\001\220\000\164\000\000\001L\001\024\001\182\000\000\000\000#H\001\244\000\000\000\166\000\000\000\170\001@\001\244\000\000\000\000\001\180\000\000\000\000\000\000\001Z\000\000\000\000\000\029\000*\001\200\000\000\001\202\000\000\001b\000\000\002\140\000\131\001\\$x\000\027\000\000\000\131\001N\000+\000\000\000\131\000\181\000\131\001\216\000\000\000\131\001\222\000\000\000\000\002\140\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\000\001\244\001\130\000\000\000\000$x\000N\000\000\000\000"), (16, "\003\029\003\029\000\209\000V\003\190\007.\0035\004R\004\214\0035\007:\000\150\000r\003\029\000\166\007\018\003\029\003\029\003\029\003\029\003\029\003\029\003\029\0011\002\209\000\194\003\029\003\238\000r\000\158\003\029\003\029\002.\003\029\003A\003\029\005\026\000\209\003\029\004V\003\029\003I\003\029\003\029\003I\002\162\003\198\003\029\003\029\002\225\002\225\003\029\006\226\003\029\003\029\003\029\003\190\003\029\003\029\000\209\000V\003\029\003\029\003\029\002\022\003\029\003\029\003\029\000\209\003\029\004*\002^\003\029\003\029\003\029\003\029\003\029\003\029\003\029\003\238\003\029\006F\002\225\003\029\001A\001A\003\029\000\209\002\158\000V\003\029\001!\003\029\003\154\003\029\003\029\003a\001A\003\198\005\226\001A\001A\001A\001A\001A\001A\001A\002\225\003B\003Q\001A\001)\003B\004\194\001A\001A\002r\001A\000\233\001A\002\217\007\135\004\210\004\n\001A\000V\001A\001A\003Y\001!\002\134\001A\001A\002\142\002\178\001A\002\202\001A\001A\001A\003\019\001A\001A\003&\000V\001A\001A\001A\003.\001A\001A\001A\003^\001A\0036\003f\001A\001A\001A\001A\001A\001A\001A\003\254\001A\001A\000V\001A\000\201\006\138\001A\000\233\003\162\006\178\001A\004\142\001A\004\022\001A\001A\003\202\000\201\005\006\004\014\000\201\000\201\000\201\000\201\000\201\000\201\000\201\004\"\004F\004^\000\201\004f\004\138\004\150\000\201\000\201\004\206\000\201\004\222\000\201\004\234\004\254\000\201\005\018\000\201\005\"\000\201\000\201\005.\005N\005V\000\201\000\201\005^\005\158\000\201\005\206\000\201\000\201\000\201\005\218\000\201\000\201\005\238\005\246\000\201\000\201\000\201\006\030\000\201\000\201\000\201\006&\000\201\006^\006~\000\201\000\201\000\201\000\201\000\201\000\201\000\201\006\146\000\201\000\201\006\182\000\201\004Z\006\198\000\201\006\215\006\234\006\242\000\201\006\251\000\201\007\n\000\201\000\201\0076\000\006\003\190\007B\000\n\004v\000\014\004\130\000\018\000\022\000\026\007w\000\000\000\000\004R\000\000\000\000\000\000\004\154\004\170\001q\000\225\000\000\004\174\000\000\003\238\000\000\000\000\000\030\000\000\000\"\000&\000\000\000\000\000\000\000*\004\186\000\000\000\000\000.\000\000\0002\0006\005&\003\198\000:\005:\000\000\000\000\000J\000N\000R\000\000\005>\000V\005F\000\000\000Z\003\190\000\000\005J\000^\000b\000f\005b\000j\000v\000\000\004M\000\000\000\000\005n\000\000\000\000\001q\000\000\001m\000\000\007\002\000\000\000z\003\238\005\130\005\142\004M\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004M\004M\004M\004M\004M\004M\004M\000\000\003\198\004M\004M\004M\000\000\004M\004M\004M\004M\000\000\004M\000\000\000\000\007\022\004M\004M\004M\000\000\000\000\004M\000r\004M\000\000\003\190\000\000\004M\004M\000\000\004M\000\000\001m\000\000\000\000\000\000\000\000\003&\000\000\004M\000\000\004M\000\000\001i\000\000\002\189\000\217\000\000\003\238\000\000\004M\004M\000\000\004M\000\000\000\000\005\198\000\000\004M\004M\000\000\002\189\004M\000\000\000\000\007&\000\000\003\198\004M\002\189\002\189\002\189\002\189\002\189\002\189\002\189\000\000\000\000\002\189\002\189\002\189\000\000\002\189\002\189\002\189\002\189\000\000\002\189\000\000\000\000\000\000\002\189\002\189\002\189\000\000\000\000\002\189\001it\000\000\000\000\000\000\000\000\001\233\001\233\000\000\001&\000\000\000\000\000\000\000\000\001\233\001\233\000\000\002\t\001\233\000\000\000\000\000\000\000\000\000\000\001\233\002\t\002\t\002\t\002\t\002\t\002\t\002\t\000\000\000\000\002\t\002\t\000\186\000\000\000\206\002\t\002\t\000\150\000\000\002\t\000\000\000\000\000\000\002\t\002\t\002\t\000\000\000\000\002\t\000\000\002\t\000\000\000\000\000\000\002\t\000\158\000\000\002\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\t\000\000\002\t\000\000\000\000\000\000\002\001\000\000\000\000\000\000\000\000\002\t\002\t\000\000\002\t\000\000\000\000\000\000\000\000\002\t\002\t\000\000\002\001\002\t\000\000\000\000\000\000\000\000\000\000\002\ta\000\000\000\000\000\000\000\000\0021\0021\000\000\001&\000\000\000\000\000\000\000\000\0021\0021\000\000\000\174\0021\000\000\000\000\000\000\000\000\000\000\0021\001\002\001J\001V\002a\002a\002a\002a\000\000\000\000\002a\002a\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\001z\001\026\001>\000\000\000\000\001\134\000\000\002a\000\000\000\000\000\000\001\170\000\158\000\000\002a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\001\194\000\000\000\000\000\000\002!\000\000\000\000\000\000\000\000\001\206\002a\000\000\001&\000\000\000\000\000\000\000\000\002a\002a\000\000\000\174\001\146\000\000\000\000\000\000\000\000\000\000\001\158\002!\002!\002!\002!\002!\002!\002!\000\000\000\000\002!\002!\000\186\000\000\000\206\001\014\002!\000\150\000\000\0012\000\000\000\000\000\000\002!\001\026\001>\000\000\000\000\002!\000\000\002!\000\000\000\000\000\000\002!\000\158\000\000\002!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002!\000\000\002!\000\000\000\000\000\000\002q\000\000\000\000\000\000\000\000\002!\002!\000\000\001&\000\000\000\000\000\000\000\000\002!\002!\000\000\000\174\002!\000\000\000\000\000\000\000\000\000\000\002!\001\002\001J\001V\002q\002q\002q\002q\000\000\000\000\002q\002q\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\002q\001\026\001>\000\000\000\000\001\134\000\000\002q\000\000\000\000\000\000\001\170\000\158\000\000\002q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\001\194\000\000\000\000\000\000\002y\000\000\000\000\000\000\000\000\002q\002q\000\000\001&\000\000\000\000\000\000\000\000\002q\002q\000\000\000\174\001\146\000\000\000\000\000\000\000\000\000\000\001\158\001\002\001J\001V\002y\002y\002y\002y\000\000\000\000\002y\002y\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\002y\001\026\001>\000\000\000\000\002y\000\000\002y\000\000\000\000\000\000\002y\000\158\000\000\002y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002y\000\000\002y\000\000\000\000\000\000\002)\000\000\000\000\000\000\000\000\002y\002y\000\000\001&\000\000\000\000\000\000\000\000\002y\002ynnn\000\150\000\000\0012\000\000\000\000\000\000\002\145\001\026\001>\000\000\000\000\002\145\000\000\002\145\000\000\000\000\000\000\002\145\000\158\000\000\002\145\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\145\000\000\002\145\000\000\000\000\000\000\002i\000\000\000\000\000\000\000\000\002\145\002\145\000\000\001&\000\000\000\000\000\000\000\000\002\145\002\145\000\000\000\174\001\146\000\000\000\000\000\000\000\000\000\000\001\158\001\002\001J\001V\002i\002i\002i\002i\000\000\000\000\002i\002i\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\002i\001\026\001>\000\000\000\000\001\134\000\000\002i\000\000\000\000\000\000\001\170\000\158\000\000\002i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\001\194\000\000\000\000\000\000\002Y\000\000\000\000\000\000\000\000\002i\002i\000\000\001&\000\000\000\000\000\000\000\000\002i\002i\000\000\000\174\001\146\000\000\000\000\000\000\000\000\000\000\001\158\001\002\001J\001V\002Y\002Y\002Y\002Y\000\000\000\000\002Y\002Y\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\001z\001\026\001>\000\000\000\000\001\134\000\000\002Y\000\000\000\000\000\000\001\170\000\158\000\000\002Y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\001\194\000\000\000\000\000\000\002Q\000\000\000\000\000\000\000\000\001\206\002Y\000\000\001&\000\000\000\000\000\000\000\000\002Y\002Y\000\000\000\174\001\146\000\000\000\000\000\000\000\000\000\000\001\158\001\002\001J\001V\002Q\002Q\002Q\002Q\000\000\000\000\002Q\002Q\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\001z\001\026\001>\000\000\000\000\001\134\000\000\002Q\000\000\000\000\000\000\001\170\000\158\000\000\002Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\001\194\000\000\000\000\000\000\002I\000\000\000\000\000\000\000\000\001\206\002Q\000\000\001&\000\000\000\000\000\000\000\000\002Q\002Q\000\000\000\174\001\146\000\000\000\000\000\000\000\000\000\000\001\158\001\002\001J\001V\002I\002I\002I\002I\000\000\000\000\002I\002I\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\001zy\000\000\000\000\000\000\000\000\001\153\001\153\000\000\001\153\000\000\000\000\000\000\000\000\001\153\001\153\000\000\001y\001\153\000\000\000\000\000\000\000\000\000\000\001\153\001y\001y\001y\001y\001y\001y\001y\000\000\000\000\001y\001y\001y\000\000\001y\001y\001y\000\150\000\000\001y\000\000\000\000\000\000\001y\001y\001y\000\000\000\000\001y\000\000\001y\000\000\000\000\000\000\001y\000\158\000\000\001y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001y\000\000\001y\000\000\000\000\000\000\001\225\000\000\000\000\000\000\000\000\001y\001y\000\000\001y\000\000\000\000\000\000\000\000\001y\001y\000\000\001\225\001y\000\000\000\000\000\000\000\000\000\000\001yb\001\218\0031\000\000\000\000\0031\002Z\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\001zrb\001\218\004=\000\000\000\000\002\n\000\145\000\186\004=\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\001z\001\026\001>\000\000\000\000\001\134\000\000\001\230\000\000\000\000\000\000\001\170\000\158\000\000\001\242\000\000\000\000\000\000\000\000\002\209\000\000\000\000\000\000\001\182\000\000\001\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\206\000\174\000\000\001&\000\000\000\000\000\000\000\000\000\145\001\002\001J\001V\001\146\001b\001\218\002\210\000\000\000\000\001\158\000\137\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\001z\001\026\001>\000\000\000\000\001\134\000\000\001\230\000\000\000\000\000\000\001\170\000\158\000\000\001\242\000\000\000\000\000\000\003\165\000\000\000\000\000\000\000\000\001\182\000\000\001\194\000\000\000\000\000\000\003\165\000\000\000\000\003\165\000\000\001\206\003\027\003\165\001&\000\000\000\000\000\000\003\165\000\137\004\194\000\000\000\174\001\146\000\000\000\000\000\000\000\000\000\000\001\158\001\002\001J\001V\000\133\001b\001\218\004n\003\198\003\165\000\000\002Z\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\001z\001\026\001>\000\000\000\000\001\134\000\000\001\230\003\165\000\000\000\000\001\170\000\158\000\006\001\242\003\165\000\n\000\000\000\014\000\000\000\018\000\022\000\026\001\182\000\000\001\194\002\197\000\000\000\000\001\017\000\000\000\000\001\017\000\000\001\206\000\000\000\000\001&\000\000\000\000\000\030\000\000\000\"\000&\000\000\000\000\001\146\000*\000\000\000\000\000\000\000.\001\158\0002\0006\000\000\000\000\000:\000>\000\000\005\202\000J\000N\000R\000\000\000\000\000V\000\000\000\000\000Z\000\000\000\000\000\000\000^\000b\000f\000\006\000j\000v\000\n\000\000\000\014\000\000\000\018\000\022\000B\000\000\000\000\003\190\000\000\000\000\000\000\000z\000\000\000\000\000\000\001\025\000\000\000\000\003\249\000\000\000\000\003\249\000\030\000\000\000\"\000&\000\000\000\000\000\000\000*\003\238\000\000\000\000\000.\000\000\0002\0006\000\000\000\000\000:\000F\000\000\000\000\000J\000N\000R\000\000\000\000\000V\003\198\003\249\000Z\000\000\000\000\000\174\000^\000b\000f\000\000\000j\000v\000\000\001\002\001J\001V\000y\001b\001\218\0066\000\000\000\000\000\000\000\000\000\186\000z\000\206\001\014\001n\000\150\003\249\0012\000\000\000\000\000\000\001z\001\026\001>\000\000\000\000\001\134\000\000\001\230\000\000\000\000\000\000\001\170\000\158\000\000\001\242\000\000\000\000\000\000\003\190\000\000\000\000\000\000\000\000\001\182\000\000\001\194\000\000\000\000\000\000\003\253\000\000\000\000\003\253\000\000\001\206\000\000\003\253\001&\000\000\000\000\000\000\003\253\000\000\001\254\000\000\000\174\001\146\000\000\000\000\000\000\000\000\000\000\001\158\001\002\001J\001V\002\201\001b\001\218\000\000\003\198\003\253\000\000\000\000\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\000\000\000\000\000\000\001z\001\026\001>\000\000\000\000\001\134\000\000\001\230\003\253\000\000\000\000\001\170\000\158\000\000\001\242\003\253\000\000\000\000\000\000\000\174\000\000\000\000\000\000\001\182\000\000\001\194\000\000\001\002\001J\001V\000]\001b\001\218\000\000\001\206\000\000\000\000\001&\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\001\146\000\000\000\000\001z\001\026\001>\001\158\000\000\001\134\000\000\001\230\000\000\000\000\000\000\001\170\000\158\000\000\001\242\000\000\000\000\000\000\000\000\000\174\000\000\000\000\000\000\001\182\000\000\001\194\000\000\001\002\001J\001V\004\005\001b\001\218\000\000\001\206\000\000\000\000\001&\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\001\146\000\000\000\000\001z\001\026\001>\001\158\000\000\001\134\000\000\001\230\000\000\000\000\000\000\001\170\000\158\000\000\001\242\000\000\000\000\000\000\000\000\000\174\000\000\000\000\000\000\001\182\000\000\001\194\000\000\001\002\001J\001V\000q\001b\001\218\000\000\001\206\000\000\000\000\001&\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\001\146\000\000\000\000\001zi\001b\001\218\000\000\004U\000\000\000\000\004U\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\004U\000\000\000\000\001z\001\026\001>\004U\000\000\001\134\000\000\001\230\000\000\000\000\000\000\001\170\000\158\000\000\001\242\000\000\000\000\000\000\000\000\000\174\000\000\000\000\000\000\001\182\000\000\001\194\000\000\001\002\001J\001V\004\029\001b\001\218\000\000\001\206\000\000\000\000\001&\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\001\146\000\000\000\000\001z\001\026\001>\001\158\000\000\001\134\000\000\001\230\000\000\000\000\000\000\001\170\000\158\000\000\001\242\000\000\000\000\000\000\000\000\000\174\000\000\000\000\000\000\001\182\000\000\001\194\000\000\001\002\001J\001V\004\r\001b\001\218\000\000\001\206\000\000\000\000\001&\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\001\146\000\000\000\000\001z\001\026\001>\001\158\000\000\001\134\000\000\001\230\000\000\000\000\000\000\001\170\000\158\000\000\001\242\000\000\000\000\000\000\000\000\000\174\000\000\000\000\000\000\001\182\000\000\001\194\000\000\001\002\001J\001V\004\021\001b\001\218\000\000\001\206\000\000\000\000\001&\000\186\000\000\000\206\001\014\001n\000\150\000\000\0012\001\146\000\000\000\000\001z\001\026\001>\001\158\000\000\001\134\000\000\001\230\000\000\000\000\000\000\001\170\000\158\000\000\001\242\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\001\182\000\n\001\194\000\014\000\000\000\018\000\022\000\026\000\000\000\000\000\000\001\206\000\000\000\000\001&\000\000\000\000\000\000\000\000\000\000\006\158\000\000\000\000\001\146\000\000\000\030\000\000\000\"\000&\001\158\000\000\000\000\000*\000\000\000\000\000\000\000.\000\000\0002\0006\000\000\000\000\000:\000F\000\000\000\000\000J\000N\000R\000\000\000\000\000V\000\000\000\000\000Z\000\000\000\000\000\000\000^\000b\000f\000\000\000j\000v\002\181\002\181\002\181\002\181\002\181\002\181\002\181\002\181\002\181\002\181\002\181\000\000\000\000\000z\000\000\000\000\002\181\000\000\000\000\000\000\002\181\000\000\003F\003J\003N\003R\003V\003Z\003r\003v\003z\003~\003\130\000\000\003\190\000\000\003j\000\000\003\134\000\000\000\014\002\181\003\138\000\000\000\026\003i\000\000\000\000\003i\002\181\000\000\000\000\003i\000\000\000\000\000\000\002\181\003\238\000\000\000\000\000\000\002\181\000\000\003\142\002\181\000&\004\226\000\000\000\000\000\000\000\000\003\146\000\000\002\181\000\000\000\000\003\198\003i\003\150\004\230\000\000\000\000\000\000\003\166\000\000\000R\000V\000\000\000V\000\000\002\181\000\000\000\000\000\000\000\000\003\170\000\000\000f\000\000\003i\000\000\000\000\000\000\000\000\000\000\000\000\003i\000\000\000\000\000\000\000\000\000\000\003\174\000\000\000z"))
  
  and lhs =
    (8, "\004\003\002\001\000QQPOONMMMMLKJJIHGFEEEEEEEEEEDCCCCBA@?>>=<<;;;;;::998877666665554433221100/.--,++++++*)))('''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&&%%$$$##\"\"!!  \031\031\030\030\030\030\029\029\029\029\028\027\027\027\027\027\026\026\026\026\025\025\024\024\023\023\022\022\021\021\020\019\019\019\019\019\019\019\018\017\017\016\015\014\r\r\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\012\011\n\t\t\b\b\b\b\b\b\b\b\b\b\b\007\006\006\006\006\006\006\005\005\005")
  
  and goto =
    ((16, "\001$\004p\004\136\000\000\004\170\004\190\000\000\004\216\005\012\000\000\005&\005>\005\\\005t\003\184\003\138\000\000\011\024\005\142\005\194\000\000\000\000\000\000\005\220\005\240\000\000\000k\000k\003\244\006\018\000\000\000\000\000\000\000\000\000\000\000\000\0003\0009\000\000\006*\000\000\000\000\0003\006@\000\000\0003\006x\000\000\006\142\000\000\0003\006\166\000\000\0003\000\000\000K\0009\0006\000\000\000\000\000\000\000\000\000\000\0003\006\200\000\000\0003\006\220\000\000\0003\006\246\000\000\0003\007*\000\000\0003\007D\000\000\0003\007\\\000\000\0003\007z\000\000\0003\007\146\000\000\0003\007\172\000\000\0003\007\224\000\000\0003\007\250\000\000\0003\b\014\000\000\0003\b0\000\000\0003\bH\000\000\0003\b^\000\000\0003\b\150\000\000\0003\b\172\000\000\0003\b\196\000\000\0003\b\230\000\000\0003\b\250\000\000\0003\t\020\000\000\0003\tH\000\000\0003\000\000\000\000\000\000\004\n\000\000\0003\004\"\000\000\000\000\000\000\000\000\000\000\0003\000\000\0003\000\000\0003\000\000\0003\0003\000<\000F\000\000\000\164\000\000\000\000\tb\000\000\0003\000\000\000\000\000\000\000K\tz\000\000\0003\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\0003\000\000\0003\000\000\000\000\0003\000\000\000\000\0003\000\000\0003\000\000\0003\000\000\0003\000\000\0003\000\000\0003\000\000\0003\000\000\000\000\0003\000\000\000\000\000y\000\136\000\154\000&\000\000\000\232\000\000\000\r\011P\000\000\000\000\000\000\000\000\000\000\000\000\000\166\000\000\001:\000\000\011r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\144\000\005\000\000\000\000\011\174\000\000\000\000\000\000\000\000\011\192\000\000\011\222\000\000\000\000\000\000\000\000\011\252\000\000\000\000\000\000\000\000\000\000\000\000\012\030\000\000\000\000\000\000\000\018\000\000\000\000\000\000\012*\000\000\0126\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\186\000\242\000\000\000\011\001\022\t\152\000\000\000\000\0003\000\000\000\208\t\176\000\000\0003\001\026\000\000\001\028\t\202\000\000\001F\004Z\000\000\000\000\0003\001t\t\254\000\000\0003\n\024\0001\001\030\000\000\000\000\000O\001b\000\146\000\000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\206\000\000\000\000\001*\000\000\000\000\000\000\001\162\001,\000\000\n,\000\000\0003\000\020\001,\001\248\002&\000\000\001:\000\000\nN\000\000\002T\nf\000\000\0003\n|\001L\000\000\001P\000\000\001L\0010\000\000\n\180\000\000\0003\000\000\000\000\000\000\000\000\001h\000\000\n\202\000\000\0003\000\000\000K\n\226\001P\000\156\000\000\000\000\000\000\000\000\000J\000\000\001@\000\250\000\000\000\000\001<\000\000\000\000\0003\000\000\011\004\000\000\0003\000\000\000\000\000\000\000\000\000\000\000\000\0003\002\170\000\000\000\000\000\000\002\216\000\000\000L\000\000\001h\000\000\000\000\000\000\000\000\000\021\000\000\000\000\001\030\000\000\000^\000\000\000\000\001`\000\000\000\000\000\000\0003\003\006\000\000\001 \000\000\001H\000\000\003\\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\204\000\230\000\000\000\000\000\000\000\000\000\000\000\000\000\011\001d\000\000\012B\000\000\000\000\001h\001d\001N\000\000\001z\000\000\001|\000\000\000\000\001\128\000\000\000\000\000\000\000\170\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\154\000\000\000\000\000\000\011\"\000\000\000\000\000\000"), (16, "\000 \000!\000\"\001g\001\014\001\181\001\154\001\155\000\028\000<\001\210\0013\000\232\001\183\001\148\000 \000!\000\"\001g\000\156\001\157\000\254\001j\000\232\001\211\000\141\000\170\001\015\0007\001\148\000\205\001<\001\001\000'\000#\001\156\001\155\001j\001k\000\255\001\016\0009\001\212\000 \000!\000\"\001g\001\b\000=\000#\000\255\001\151\001\216\001\150\001p\001=\001q\001\148\001\131\001\002\001\214\001z\000\171\001\135\001\137\001j\001\151\001\017\000\167\001p\001\002\001q\000?\001\131\001\139\001\140\001\215\000#\001\135\001\137\000\208\001k\000 \000!\000\"\001g\001>\000?\000;\001\139\001\140\0017\001\161\001\155\001\149\001?\001\221\001p\001x\001q\001\210\001\131\001u\001\014\001j\001A\001\135\001\137\000\154\000 \000!\000\"\001g\000\153\001\211\000?\000#\001\139\001\140\000\155\001k\0017\001\218\001\179\001\217\001C\001\020\000\205\001v\000\203\001\190\001j\001\212\001\186\001D\001A\001p\000\207\001q\001x\001\131\001\019\001\213\000#\000\217\001\135\001\137\001k\001\223\001u\001\214\000 \000!\000\"\000?\001<\001\139\001\140\000=\001\170\001\192\001\170\001\217\001p\001D\001q\001\215\001\131\000 \000!\000\"\001g\001\135\001\137\001\219\001}\001\188\000\208\001\159\001F\001\176\000?\001\166\001\139\001\140\000#\001x\001\157\000\196\000\198\001j\000 \000!\000\"\001g\000\220\0007\001\172\001\177\001\171\001\180\001\029\000#\001\"\0012\001\162\001k\0008\001H\000>\001>\001K\001Q\001j\000 \000!\000\"\001g\001U\001^\000\200\001`\001p\000?\001q\000#\001\131\001b\001\153\001k\001c\001\135\001\137\001l\001{\001\127\001j\001\128\001\164\001\194\000?\001\199\001\139\001\140\001\200\001p\001\201\001q\000#\001\131\001\203\001\205\001k\001\208\001\135\001\137\000\000\000 \000!\000\"\001g\000\000\000\000\000?\000\000\001\139\001\140\000\000\001p\000\000\001q\001\145\001\131\000\000\000\000\000\000\000\000\001\135\001\137\001j\000 \000!\000\"\001g\000\000\000\000\000?\000\000\001\139\001\140\000\000\000#\000\000\000\000\001\144\001k\000\000\000\000\000\000\000\000\000\000\000\000\001j\000 \000!\000\"\001g\000\000\000\000\000\000\000\000\001p\000\000\001q\000#\001\131\000\000\001i\001k\000\000\001\135\001\137\000\000\000\000\000\000\001j\000\000\000\000\000\000\000?\000\000\001\139\001\140\000\000\001p\000\000\001q\000#\001\131\000\000\000\000\001k\000\000\001\135\001\137\000\000\000 \000!\000\"\001g\000\000\000\000\000?\000\000\001\139\001\140\000\000\001p\000\000\001q\001\143\001\131\000\000\000\000\000\000\000\000\001\135\001\137\001j\000 \000!\000\"\001g\000\000\000\000\000?\000\000\001\139\001\140\000\000\000#\000\000\000\000\001\147\001k\000\000\000\000\000\000\000\000\000\000\000\000\001j\000 \000!\000\"\001g\000\000\000\000\000\000\000\000\001p\000\000\001q\000#\001\131\000\000\001\169\001k\000\000\001\135\001\137\000\000\000\000\000\000\001j\000\000\000\000\000\000\000?\000\000\001\139\001\140\000\000\001p\000\000\001q\000#\001\131\000\000\000\000\001k\000\000\001\135\001\137\000\000\000 \000!\000\"\001g\000\000\000\000\000?\000\000\001\139\001\140\000\000\001p\000\000\001q\001\175\001\131\000\000\000\000\000\000\000\000\001\135\001\137\001j\000 \000!\000\"\000\000\000\000\000\000\000?\000\000\001\139\001\140\000\000\000#\000\000\000\156\000\000\001k\000\000\000\000\000\000\000\000\000\160\000\000\000\000\000 \000!\000\"\000\000\000\000\000\000\000\000\000\000\001p\000\000\001q\000#\001\131\000\000\000\000\000\150\000\000\001\135\001\137\000\000\000\000\000\132\000\000\000\161\000\000\000\000\000?\000\000\001\139\001\140\000 \000!\000\"\000\163\000#\000>\000\000\000\133\000\136\000\167\000\000\000 \000!\000\"\000\000\000\000\000\000\000\172\000\000\000?\000\000\000\132\000\000\000 \000!\000\"\0008\000\000\000>\000\000\000\000\000\000\000\135\000\000\000#\000\000\000\000\000\133\000\136\000\000\000\000\000\000\000?\000\000\000\138\000#\000\000\000\139\000\133\000\136\000\000\000 \000!\000\"\000\000\000\000\0008\000#\000>\000\000\000\133\000\136\000 \000!\000\"\000\000\000\000\0008\000\000\000>\000\000\000\000\000?\000\000\000 \000!\000\"\000\000\000\000\0008\000\000\000>\001(\000?\000\000\000#\000\000\000\000\001)\001*\000\000\000 \000!\000\"\000\000\000?\000#\000\000\000\000\000\194\000\195\000 \000!\000\"\000\000\000\000\000\000\0008\000#\000>\000\000\000\192\000\193\000\000\000 \000!\000\"\000\000\0008\000\000\000>\000\000\000\000\000?\000\000\000#\000\000\000\000\000\190\000\191\0008\000\000\000>\000\000\000?\000#\000\000\000\000\000\188\000\189\000 \000!\000\"\000\000\000\000\000\000\000?\0008\000#\000>\000\000\000\186\000\187\000 \000!\000\"\000\000\0008\000\000\000>\000\000\000\000\000\000\000?\000\000\000 \000!\000\"\000\000\000\000\0008\000\000\000>\000?\000#\000\000\000\000\000\184\000\185\000\000\000 \000!\000\"\000\000\000\000\000\000\000?\000#\000\000\000\000\000\182\000\183\000 \000!\000\"\000\000\0008\000\000\000>\000#\000\000\000\000\000\178\000\180\000\000\000 \000!\000\"\000\000\0008\000\000\000>\000?\000\000\000#\000\000\000\000\000\176\000\177\000\000\000\000\0008\000\000\000>\000\000\000?\000#\000\000\000\000\000\174\000\175\000 \000!\000\"\000\000\000\000\0008\000?\000>\000#\000\000\000\000\000\148\000\149\000 \000!\000\"\000\000\0008\000\000\000>\000\000\000?\000\000\000 \000!\000\"\000\000\000\000\000\000\000\000\0008\000\000\000>\000?\000#\000\000\000\000\000\146\000\147\000\000\000 \000!\000\"\000\000\000\000\000\000\000?\000#\000\000\000\000\000\144\000\145\000 \000!\000\"\000\000\0008\000#\000>\000\000\000\142\000\143\000\000\000 \000!\000\"\000\000\000\000\000\000\0008\000\000\000>\000?\000\000\000#\000\000\000\000\000$\000%\0008\000\000\000>\000\000\000\000\000\000\000?\000#\000\000\000\000\000)\000+\000 \000!\000\"\000\000\000?\0008\000#\000>\000\000\000-\000.\000 \000!\000\"\000\000\000\000\000\000\0008\000\000\000>\000\000\000?\000\000\000 \000!\000\"\000\000\000\000\0008\000\000\000>\000\000\000\000\000?\000#\000\000\000\000\0000\000@\000\000\000 \000!\000\"\000\000\000?\000#\000\000\000\000\0002\0003\000 \000!\000\"\000\000\000\000\000\000\0008\000#\000>\000\000\0005\0006\000\000\000 \000!\000\"\000\000\0008\000\000\000>\000\000\000\000\000?\000\000\000#\000\000\000\000\000B\000C\0008\000\000\000>\000\000\000?\000#\000\000\000\000\000E\000F\000 \000!\000\"\000\000\000\000\000\000\000?\0008\000#\000>\000\000\000H\000I\000 \000!\000\"\000\000\0008\000\000\000>\000\000\000\000\000\000\000?\000\000\000 \000!\000\"\000\000\000\000\0008\000\000\000>\000?\000#\000\000\000\000\000K\000L\000\000\000 \000!\000\"\000\000\000\000\000\000\000?\000#\000\000\000\000\000N\000O\000 \000!\000\"\000\000\0008\000\000\000>\000#\000\000\000\000\000Q\000R\000\000\000 \000!\000\"\000\000\0008\000\000\000>\000?\000\000\000#\000\000\000\000\000T\000U\000\000\000\000\0008\000\000\000>\000\000\000?\000#\000\000\000\000\000W\000X\000 \000!\000\"\000\000\000\000\0008\000?\000>\000#\000\000\000\000\000Z\000[\000 \000!\000\"\000\000\0008\000\000\000>\000\000\000?\000\000\000 \000!\000\"\000\000\000\000\000\000\000\000\0008\000\000\000>\000?\000#\000\000\000\000\000]\000^\000\000\000 \000!\000\"\000\000\000\000\000\000\000?\000#\000\000\000\000\000`\000a\000 \000!\000\"\000\000\0008\000#\000>\000\000\000c\000d\000\000\000 \000!\000\"\000\000\000\000\000\000\0008\000\000\000>\000?\000\000\000#\000\000\000\000\000f\000g\0008\000\000\000>\000\000\000\000\000\000\000?\000#\000\000\000\000\000i\000j\000 \000!\000\"\000\000\000?\0008\000#\000>\000\000\000l\000m\000 \000!\000\"\000\000\000\000\000\000\0008\000\000\000>\000\000\000?\000\000\000 \000!\000\"\000\000\000\000\0008\000\000\000>\000\000\000\000\000?\000#\000\000\000\000\000o\000p\000\000\000 \000!\000\"\000\000\000?\000#\000\000\000\000\000r\000s\000 \000!\000\"\000\000\000\000\000\000\0008\000#\000>\000\000\000u\000v\000\000\000 \000!\000\"\000\000\0008\000\000\000>\000\000\000\000\000?\000\000\000#\000\000\000\000\000x\000y\0008\000\000\000>\000\000\000?\000#\000\000\000\000\000{\000|\000 \000!\000\"\000\000\000\000\000\000\000?\0008\000#\000>\000\000\000~\000\127\000 \000!\000\"\000\000\0008\000\000\000>\000\000\000\000\000\000\000?\000\000\000 \000!\000\"\000\000\000\000\0008\000\000\000>\000?\000#\000\000\000\000\000\129\000\130\000\000\000 \000!\000\"\000\000\000\000\000\000\000?\000#\000\000\000\000\000\158\000\159\000 \000!\000\"\000\000\0008\000\000\000>\000#\000\000\000\000\000\165\000\166\000\000\000 \000!\000\"\000\000\0008\000\000\000>\000?\000\000\000#\000\000\000\000\001\025\001\027\000\000\000\000\0008\000\000\000>\000\000\000?\000#\000\000\000\000\001\031\001 \000 \000!\000\"\000\000\000\000\0008\000?\000>\000#\000\000\000\000\001%\001\167\000 \000!\000\"\000\000\0008\000\000\000>\000\000\000?\000\000\000 \000!\000\"\000\000\000\000\000\000\000\000\0008\000\000\000>\000?\000#\000\000\000\000\001-\001.\000\000\000 \000!\000\"\000\000\000\000\000\000\000?\000#\000\000\000\000\0010\001\158\000 \000!\000\"\000\000\0008\000#\000>\000\000\001M\001N\000\000\000 \000!\000\"\000\000\000\000\000\000\0008\000\000\000>\000?\000\000\000#\000\000\000\000\001W\001\141\0008\000\000\000>\000\000\000\000\000\000\000?\000#\000\000\000\000\001Z\001[\000 \000!\000\"\000\000\000?\0008\000#\000>\000\000\001]\001_\000 \000!\000\"\000\000\000\000\000\000\0008\000\000\000>\000\000\000?\000\000\000 \000!\000\"\000\000\000\000\0008\000\000\000>\000\000\000\000\000?\000#\000\000\000\000\001e\001f\000\000\000 \000!\000\"\000\000\000?\000#\000\000\000\000\001n\001o\000 \000!\000\"\000\000\000\000\000\000\0008\000#\000>\000\237\001\129\001\130\001\225\000\244\000\000\000\000\000\000\0008\000\000\000>\000\247\000\000\000?\000\000\000#\000\000\000\000\001\133\001\134\0008\000\000\000>\000\237\000?\000#\001\r\000\244\000\000\000\150\000\000\000\248\000\000\000\000\000\247\000\000\000?\0008\000\000\000>\000\237\000\000\000\000\001\012\000\244\000\249\000\000\0008\000\000\000>\000\000\000\247\000\250\000?\000\248\000\237\000\000\000\000\001\n\000\244\000\000\001\227\000\000\000?\000\000\000\000\000\247\000\000\000\249\000\000\000\237\000\248\000\000\000\251\000\244\000\250\000\000\000\000\000\000\000\237\000\000\000\247\000\239\000\244\000\000\000\249\000\248\000\000\000\000\000\000\000\247\000\000\000\250\000\000\000\237\000\000\000\000\000\241\000\244\000\000\000\249\000\248\000\000\000\000\000\000\000\247\000\000\000\250\000\000\000\237\000\248\000\000\000\246\000\244\000\000\000\249\000\000\000\000\000\000\000\000\000\247\000\000\000\250\000\000\000\249\000\248\000\237\000\000\000\000\000\253\000\244\000\250\000\237\000\000\000\000\001\005\000\244\000\247\000\237\000\249\000\248\001\007\000\244\000\247\000\237\000\000\000\250\001\196\000\244\000\247\000\000\000\000\000\000\000\000\000\249\000\247\000\000\000\248\000\000\000\000\000\000\000\250\000\000\000\248\000\000\000\000\000\000\000\000\000\000\000\248\000\000\000\249\000\000\000\000\000\000\000\248\000\000\000\249\000\250\000\000\000\000\000\000\000\000\000\249\000\250\000\000\000\000\000\000\000\000\000\249\000\250\000\000\000\000\000\000\000\000\000\000\000\250"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = fn;
            MenhirLib.EngineTypes.startp = _startpos_fn_;
            MenhirLib.EngineTypes.endp = _endpos_fn_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = an;
                MenhirLib.EngineTypes.startp = _startpos_an_;
                MenhirLib.EngineTypes.endp = _endpos_an_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let fn : (EslSyntax.Id.t) = Obj.magic fn in
        let _3 : unit = Obj.magic _3 in
        let an : (EslSyntax.Id.t) = Obj.magic an in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 156 "src/semantics/extended/parser/eParser.mly"
    ( EAdvice.before fn an @> at _sloc )
# 648 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EAdvice.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = fn;
            MenhirLib.EngineTypes.startp = _startpos_fn_;
            MenhirLib.EngineTypes.endp = _endpos_fn_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = an;
                MenhirLib.EngineTypes.startp = _startpos_an_;
                MenhirLib.EngineTypes.endp = _endpos_an_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let fn : (EslSyntax.Id.t) = Obj.magic fn in
        let _3 : unit = Obj.magic _3 in
        let an : (EslSyntax.Id.t) = Obj.magic an in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 158 "src/semantics/extended/parser/eParser.mly"
    ( EAdvice.after fn an @> at _sloc )
# 706 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EAdvice.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let s : (EslSyntax.EStmt.t) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v =
          let _endpos = _endpos_s_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 173 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Debug s @> at _sloc )
# 743 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 211 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Skip @> at _sloc )
# 773 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ss;
            MenhirLib.EngineTypes.startp = _startpos_ss_;
            MenhirLib.EngineTypes.endp = _endpos_ss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ss : (EslSyntax.EStmt.t list) = Obj.magic ss in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 213 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Block ss @> at _sloc )
# 817 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (EslSyntax.EExpr.t list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (EslSyntax.EExpr.t list) = 
# 241 "<standard.mly>"
    ( xs )
# 857 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ferr;
          MenhirLib.EngineTypes.startp = _startpos_ferr_;
          MenhirLib.EngineTypes.endp = _endpos_ferr_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = fn;
              MenhirLib.EngineTypes.startp = _startpos_fn_;
              MenhirLib.EngineTypes.endp = _endpos_fn_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let ferr : (EslSyntax.Id.t option) = Obj.magic ferr in
        let es : (EslSyntax.EExpr.t list) = Obj.magic es in
        let fn : (EslSyntax.Id.t) = Obj.magic fn in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fn_ in
        let _endpos = _endpos_ferr_ in
        let _v =
          let _endpos = _endpos_ferr_ in
          let _symbolstartpos = _startpos_fn_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 306 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.Call (EExpr.Val (Str fn.it) @> fn.at, es, ferr) @> at _sloc )
# 900 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ferr;
          MenhirLib.EngineTypes.startp = _startpos_ferr_;
          MenhirLib.EngineTypes.endp = _endpos_ferr_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = fe;
                MenhirLib.EngineTypes.startp = _startpos_fe_;
                MenhirLib.EngineTypes.endp = _endpos_fe_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ferr : (EslSyntax.Id.t option) = Obj.magic ferr in
        let es : (EslSyntax.EExpr.t list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let fe : (EslSyntax.EExpr.t) = Obj.magic fe in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ferr_ in
        let _v =
          let _endpos = _endpos_ferr_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 308 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.Call (fe, es, ferr) @> at _sloc )
# 958 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = es;
          MenhirLib.EngineTypes.startp = _startpos_es_;
          MenhirLib.EngineTypes.endp = _endpos_es_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = fn;
            MenhirLib.EngineTypes.startp = _startpos_fn_;
            MenhirLib.EngineTypes.endp = _endpos_fn_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let es : (EslSyntax.EExpr.t list) = Obj.magic es in
        let fn : (EslSyntax.Id.t) = Obj.magic fn in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_es_ in
        let _v =
          let _endpos = _endpos_es_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 310 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.ECall (fn, es) @> at _sloc )
# 1002 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = es;
          MenhirLib.EngineTypes.startp = _startpos_es_;
          MenhirLib.EngineTypes.endp = _endpos_es_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = fe;
                MenhirLib.EngineTypes.startp = _startpos_fe_;
                MenhirLib.EngineTypes.endp = _endpos_fe_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let es : (EslSyntax.EExpr.t list) = Obj.magic es in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let fe : (EslSyntax.EExpr.t) = Obj.magic fe in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_es_ in
        let _v =
          let _endpos = _endpos_es_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 312 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.Curry (fe, es) @> at _sloc )
# 1060 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = id_target;
          MenhirLib.EngineTypes.startp = _startpos_id_target_;
          MenhirLib.EngineTypes.endp = _endpos_id_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let id_target : (EslSyntax.Id.t) = Obj.magic id_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_id_target_ in
        let _v : (EslSyntax.Id.t) = id_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (EslSyntax.Id.t list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (EslSyntax.Id.t list) = 
# 241 "<standard.mly>"
    ( xs )
# 1128 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
            MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
            MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_no_blocklike_expr_target_ in
        let _endpos = _endpos__2_ in
        let _v : (EslSyntax.EExpr.t) = no_blocklike_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = obj_expr_target;
            MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
            MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_obj_expr_target_ in
        let _endpos = _endpos__2_ in
        let _v : (EslSyntax.EExpr.t) = obj_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = func_target;
            MenhirLib.EngineTypes.startp = _startpos_func_target_;
            MenhirLib.EngineTypes.endp = _endpos_func_target_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let func_target : (EslSyntax.EFunc.t) = Obj.magic func_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_func_target_ in
        let _endpos = _endpos__2_ in
        let _v : (EslSyntax.EFunc.t) = func_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = prog_target;
            MenhirLib.EngineTypes.startp = _startpos_prog_target_;
            MenhirLib.EngineTypes.endp = _endpos_prog_target_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let prog_target : (EslSyntax.EProg.t) = Obj.magic prog_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_prog_target_ in
        let _endpos = _endpos__2_ in
        let _v : (EslSyntax.EProg.t) = prog_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = stmt_target;
            MenhirLib.EngineTypes.startp = _startpos_stmt_target_;
            MenhirLib.EngineTypes.endp = _endpos_stmt_target_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let stmt_target : (EslSyntax.EStmt.t) = Obj.magic stmt_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_stmt_target_ in
        let _endpos = _endpos__2_ in
        let _v : (EslSyntax.EStmt.t) = stmt_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = type_target;
            MenhirLib.EngineTypes.startp = _startpos_type_target_;
            MenhirLib.EngineTypes.endp = _endpos_type_target_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let type_target : (EslSyntax.EType.t) = Obj.magic type_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_type_target_ in
        let _endpos = _endpos__2_ in
        let _v : (EslSyntax.EType.t) = type_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 181 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Print e @> at _sloc )
# 1334 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 181 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Print e @> at _sloc )
# 1373 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (EslSyntax.EExpr.t option) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v =
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 183 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Return (EParsing_helper.Expr.parse_return_expr e) @> at _sloc )
# 1410 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 185 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Assert e @> at _sloc )
# 1449 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 185 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Assert e @> at _sloc )
# 1488 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 187 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Fail e @> at _sloc )
# 1527 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 187 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Fail e @> at _sloc )
# 1566 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 189 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Throw e @> at _sloc )
# 1605 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 189 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Throw e @> at _sloc )
# 1644 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = es;
          MenhirLib.EngineTypes.startp = _startpos_es_;
          MenhirLib.EngineTypes.endp = _endpos_es_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = mn;
            MenhirLib.EngineTypes.startp = _startpos_mn_;
            MenhirLib.EngineTypes.endp = _endpos_mn_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let es : (EslSyntax.EExpr.t list) = Obj.magic es in
        let mn : (EslSyntax.Id.t) = Obj.magic mn in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_es_ in
        let _v =
          let _endpos = _endpos_es_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 191 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.MacroApply (mn, es) @> at _sloc )
# 1688 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let e : (EslSyntax.EExpr.t) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v =
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_e_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 177 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.ExprStmt e @> at _sloc )
# 1718 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = id_target;
              MenhirLib.EngineTypes.startp = _startpos_id_target_;
              MenhirLib.EngineTypes.endp = _endpos_id_target_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _2 : unit = Obj.magic _2 in
        let id_target : (EslSyntax.Id.t) = Obj.magic id_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_target_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let expr_target = no_blocklike_expr_target in
          ((id_target, expr_target) : (EslSyntax.Id.t * EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = id_target;
              MenhirLib.EngineTypes.startp = _startpos_id_target_;
              MenhirLib.EngineTypes.endp = _endpos_id_target_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _2 : unit = Obj.magic _2 in
        let id_target : (EslSyntax.Id.t) = Obj.magic id_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_target_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let expr_target = obj_expr_target in
          ((id_target, expr_target) : (EslSyntax.Id.t * EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = str_id_target;
              MenhirLib.EngineTypes.startp = _startpos_str_id_target_;
              MenhirLib.EngineTypes.endp = _endpos_str_id_target_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _2 : unit = Obj.magic _2 in
        let str_id_target : (EslSyntax.Id.t) = Obj.magic str_id_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_str_id_target_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let expr_target = no_blocklike_expr_target in
          ((str_id_target, expr_target) : (EslSyntax.Id.t * EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = str_id_target;
              MenhirLib.EngineTypes.startp = _startpos_str_id_target_;
              MenhirLib.EngineTypes.endp = _endpos_str_id_target_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _2 : unit = Obj.magic _2 in
        let str_id_target : (EslSyntax.Id.t) = Obj.magic str_id_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_str_id_target_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let expr_target = obj_expr_target in
          ((str_id_target, expr_target) : (EslSyntax.Id.t * EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (EslSyntax.Id.t list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (EslSyntax.Id.t list) = 
# 241 "<standard.mly>"
    ( xs )
# 1910 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = tret;
            MenhirLib.EngineTypes.startp = _startpos_tret_;
            MenhirLib.EngineTypes.endp = _endpos_tret_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = pxs;
              MenhirLib.EngineTypes.startp = _startpos_pxs_;
              MenhirLib.EngineTypes.endp = _endpos_pxs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = fn;
                MenhirLib.EngineTypes.startp = _startpos_fn_;
                MenhirLib.EngineTypes.endp = _endpos_fn_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let s : (EslSyntax.EStmt.t) = Obj.magic s in
        let tret : (EslSyntax.EType.t option) = Obj.magic tret in
        let pxs : ((EslSyntax.Id.t * EslSyntax.EType.t option) list) = Obj.magic pxs in
        let fn : (EslSyntax.Id.t) = Obj.magic fn in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v =
          let _endpos = _endpos_s_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 146 "src/semantics/extended/parser/eParser.mly"
    ( EFunc.create fn pxs tret s @> at _sloc )
# 1967 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EFunc.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((EslSyntax.Id.t * EslSyntax.EType.t option) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 = 
# 241 "<standard.mly>"
    ( xs )
# 2008 "src/semantics/extended/parser/eParser.ml"
           in
          let _2_1 = _2 in
          (
# 320 "src/semantics/extended/parser/eParser.mly"
                                                                                         EParsing_helper.Func.parse_params  
# 2014 "src/semantics/extended/parser/eParser.ml"
           _2_1 : ((EslSyntax.Id.t * EslSyntax.EType.t option) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 21 "src/semantics/extended/parser/eParser.mly"
       (string)
# 2036 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _endpos = _endpos_x_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 342 "src/semantics/extended/parser/eParser.mly"
                                  ( (x @> at _sloc) )
# 2048 "src/semantics/extended/parser/eParser.ml"
           : (string EslSyntax.Source.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
            MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
            MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (EslSyntax.EExpr.t) = no_blocklike_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = obj_expr_target;
            MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
            MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (EslSyntax.EExpr.t) = obj_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 20 "src/semantics/extended/parser/eParser.mly"
       (string)
# 2140 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _endpos = _endpos_x_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 340 "src/semantics/extended/parser/eParser.mly"
                                  ( (x @> at _sloc) )
# 2152 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.Id.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = import;
            MenhirLib.EngineTypes.startp = _startpos_import_;
            MenhirLib.EngineTypes.endp = _endpos_import_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let import : (EslSyntax.Id.t) = Obj.magic import in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 133 "src/semantics/extended/parser/eParser.mly"
                                                ( EImport.User import @> at _sloc )
# 2196 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EImport.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = import;
            MenhirLib.EngineTypes.startp = _startpos_import_;
            MenhirLib.EngineTypes.endp = _endpos_import_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let import : (EslSyntax.Id.t) = Obj.magic import in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 134 "src/semantics/extended/parser/eParser.mly"
                                                ( EImport.Standard import @> at _sloc )
# 2240 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EImport.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let s : (EslSyntax.EStmt.t) = Obj.magic s in
        let e : (EslSyntax.EExpr.t) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v =
          let _endpos = _endpos_s_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 227 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.While (e, s) @> at _sloc )
# 2284 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
              MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
              MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let s : (EslSyntax.EStmt.t) = Obj.magic s in
        let _6 : unit = Obj.magic _6 in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _4 : unit = Obj.magic _4 in
        let x : (EslSyntax.Id.t) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos = _endpos_s_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 229 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.ForEach (x, e, s) @> at _sloc )
# 2357 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = obj_expr_target;
              MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
              MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let s : (EslSyntax.EStmt.t) = Obj.magic s in
        let _6 : unit = Obj.magic _6 in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _4 : unit = Obj.magic _4 in
        let x : (EslSyntax.Id.t) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v =
          let e = obj_expr_target in
          let _endpos = _endpos_s_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 229 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.ForEach (x, e, s) @> at _sloc )
# 2430 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let s : (EslSyntax.EStmt.t) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v =
          let _endpos = _endpos_s_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 231 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.RepeatUntil (s, None) @> at _sloc )
# 2467 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let e : (EslSyntax.EExpr.t) = Obj.magic e in
        let _3 : unit = Obj.magic _3 in
        let s : (EslSyntax.EStmt.t) = Obj.magic s in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 233 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.RepeatUntil (s, Some e) @> at _sloc )
# 2525 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (EslSyntax.EImport.t list) = 
# 216 "<standard.mly>"
    ( [] )
# 2544 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (EslSyntax.EImport.t list) = Obj.magic xs in
        let x : (EslSyntax.EImport.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (EslSyntax.EImport.t list) = 
# 219 "<standard.mly>"
    ( x :: xs )
# 2576 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((EslSyntax.EProg.t -> unit) list) = 
# 216 "<standard.mly>"
    ( [] )
# 2594 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((EslSyntax.EProg.t -> unit) list) = Obj.magic xs in
        let x : (EslSyntax.EProg.t -> unit) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : ((EslSyntax.EProg.t -> unit) list) = 
# 219 "<standard.mly>"
    ( x :: xs )
# 2626 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (EslSyntax.EStmt.t list) = 
# 216 "<standard.mly>"
    ( [] )
# 2644 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (EslSyntax.EStmt.t list) = Obj.magic xs in
        let x : (EslSyntax.EStmt.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (EslSyntax.EStmt.t list) = 
# 219 "<standard.mly>"
    ( x :: xs )
# 2676 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((EslSyntax.EExpr.t * EslSyntax.EStmt.t) list) = 
# 216 "<standard.mly>"
    ( [] )
# 2694 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((EslSyntax.EExpr.t * EslSyntax.EStmt.t) list) = Obj.magic xs in
        let x : (EslSyntax.EExpr.t * EslSyntax.EStmt.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : ((EslSyntax.EExpr.t * EslSyntax.EStmt.t) list) = 
# 219 "<standard.mly>"
    ( x :: xs )
# 2726 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 15 "src/semantics/extended/parser/eParser.mly"
       (int)
# 2747 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (EslSyntax.EType.tliteral) = 
# 436 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.IntegerLit i )
# 2755 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let f : (
# 16 "src/semantics/extended/parser/eParser.mly"
       (float)
# 2776 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f_ in
        let _v : (EslSyntax.EType.tliteral) = 
# 437 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.FloatLit f )
# 2784 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 17 "src/semantics/extended/parser/eParser.mly"
       (string)
# 2805 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (EslSyntax.EType.tliteral) = 
# 438 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.StringLit s )
# 2813 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let b : (
# 18 "src/semantics/extended/parser/eParser.mly"
       (bool)
# 2834 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic b in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_b_ in
        let _endpos = _endpos_b_ in
        let _v : (EslSyntax.EType.tliteral) = 
# 439 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.BooleanLit b )
# 2842 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 19 "src/semantics/extended/parser/eParser.mly"
       (string)
# 2863 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (EslSyntax.EType.tliteral) = 
# 440 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.SymbolLit s )
# 2871 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = fn;
          MenhirLib.EngineTypes.startp = _startpos_fn_;
          MenhirLib.EngineTypes.endp = _endpos_fn_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let fn : (EslSyntax.Id.t) = Obj.magic fn in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_fn_ in
        let _v =
          let _endpos = _endpos_fn_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 333 "src/semantics/extended/parser/eParser.mly"
                                                ( EExpr.Val (Value.Str fn.it) @> at _sloc )
# 2907 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
            MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
            MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (EslSyntax.EExpr.t) = no_blocklike_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = obj_expr_target;
            MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
            MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (EslSyntax.EExpr.t) = obj_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (EslSyntax.EExpr.t list) = 
# 145 "<standard.mly>"
    ( [] )
# 2996 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.EExpr.t list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (EslSyntax.EExpr.t list) = 
# 148 "<standard.mly>"
    ( x )
# 3021 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((EslSyntax.Id.t * EslSyntax.EExpr.t) list) = 
# 145 "<standard.mly>"
    ( [] )
# 3039 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : ((EslSyntax.Id.t * EslSyntax.EExpr.t) list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((EslSyntax.Id.t * EslSyntax.EExpr.t) list) = 
# 148 "<standard.mly>"
    ( x )
# 3064 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (EslSyntax.Id.t list) = 
# 145 "<standard.mly>"
    ( [] )
# 3082 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.Id.t list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (EslSyntax.Id.t list) = 
# 148 "<standard.mly>"
    ( x )
# 3107 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) list) = 
# 145 "<standard.mly>"
    ( [] )
# 3125 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : ((EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) list) = 
# 148 "<standard.mly>"
    ( x )
# 3150 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((EslSyntax.Id.t * EslSyntax.EType.t option) list) = 
# 145 "<standard.mly>"
    ( [] )
# 3168 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : ((EslSyntax.Id.t * EslSyntax.EType.t option) list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((EslSyntax.Id.t * EslSyntax.EType.t option) list) = 
# 148 "<standard.mly>"
    ( x )
# 3193 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = pxs;
            MenhirLib.EngineTypes.startp = _startpos_pxs_;
            MenhirLib.EngineTypes.endp = _endpos_pxs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mn;
              MenhirLib.EngineTypes.startp = _startpos_mn_;
              MenhirLib.EngineTypes.endp = _endpos_mn_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let s : (EslSyntax.EStmt.t) = Obj.magic s in
        let pxs : (EslSyntax.Id.t list) = Obj.magic pxs in
        let mn : (EslSyntax.Id.t) = Obj.magic mn in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v =
          let _endpos = _endpos_s_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 142 "src/semantics/extended/parser/eParser.mly"
   ( EMacro.create mn pxs s @> at _sloc )
# 3243 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EMacro.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = stmt_target;
          MenhirLib.EngineTypes.startp = _startpos_stmt_target_;
          MenhirLib.EngineTypes.endp = _endpos_stmt_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = pattern_target;
              MenhirLib.EngineTypes.startp = _startpos_pattern_target_;
              MenhirLib.EngineTypes.endp = _endpos_pattern_target_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let stmt_target : (EslSyntax.EStmt.t) = Obj.magic stmt_target in
        let _3 : unit = Obj.magic _3 in
        let pattern_target : (EslSyntax.EPat.t' EslSyntax.Source.t) = Obj.magic pattern_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_stmt_target_ in
        let _v : (EslSyntax.EPat.t * EslSyntax.EStmt.t) = (pattern_target, stmt_target) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let cs : (EslSyntax.EPat.t * EslSyntax.EStmt.t) = Obj.magic cs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_cs_ in
        let _endpos = _endpos_cs_ in
        let _v : ((EslSyntax.EPat.t * EslSyntax.EStmt.t) list) = 
# 246 "src/semantics/extended/parser/eParser.mly"
                                                    ( [ cs ] )
# 3311 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = css;
          MenhirLib.EngineTypes.startp = _startpos_css_;
          MenhirLib.EngineTypes.endp = _endpos_css_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = cs;
            MenhirLib.EngineTypes.startp = _startpos_cs_;
            MenhirLib.EngineTypes.endp = _endpos_cs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let css : ((EslSyntax.EPat.t * EslSyntax.EStmt.t) list) = Obj.magic css in
        let cs : (EslSyntax.EPat.t * EslSyntax.EStmt.t) = Obj.magic cs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_cs_ in
        let _endpos = _endpos_css_ in
        let _v : ((EslSyntax.EPat.t * EslSyntax.EStmt.t) list) = 
# 247 "src/semantics/extended/parser/eParser.mly"
                                                      ( cs :: css )
# 3343 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = id_target;
          MenhirLib.EngineTypes.startp = _startpos_id_target_;
          MenhirLib.EngineTypes.endp = _endpos_id_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let id_target : (EslSyntax.Id.t) = Obj.magic id_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_id_target_ in
        let _v : (EslSyntax.Id.t) = id_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
            MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
            MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (EslSyntax.EExpr.t) = no_blocklike_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = obj_expr_target;
            MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
            MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (EslSyntax.EExpr.t) = obj_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = val_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_val_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_val_expr_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let val_expr_target : (EslSyntax.EExpr.t) = Obj.magic val_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_val_expr_target_ in
        let _endpos = _endpos_val_expr_target_ in
        let _v : (EslSyntax.EExpr.t) = val_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = var_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_var_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_var_expr_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let var_expr_target : (EslSyntax.EExpr.t) = Obj.magic var_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_var_expr_target_ in
        let _endpos = _endpos_var_expr_target_ in
        let _v : (EslSyntax.EExpr.t) = var_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_op_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_op_expr_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op_expr_target : (EslSyntax.EExpr.t) = Obj.magic op_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_expr_target_ in
        let _endpos = _endpos_op_expr_target_ in
        let _v : (EslSyntax.EExpr.t) = op_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = call_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_call_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_call_expr_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let call_expr_target : (EslSyntax.EExpr.t) = Obj.magic call_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_call_expr_target_ in
        let _endpos = _endpos_call_expr_target_ in
        let _v : (EslSyntax.EExpr.t) = call_expr_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((EslSyntax.Id.t * EslSyntax.EExpr.t) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let flds = 
# 241 "<standard.mly>"
    ( xs )
# 3565 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 316 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.NewObj (EParsing_helper.Expr.parse_object_fields flds) @> at _sloc )
# 3573 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = fn;
              MenhirLib.EngineTypes.startp = _startpos_fn_;
              MenhirLib.EngineTypes.endp = _endpos_fn_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t : (EslSyntax.EType.t) = Obj.magic t in
        let _2 : unit = Obj.magic _2 in
        let fn : (EslSyntax.Id.t) = Obj.magic fn in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fn_ in
        let _endpos = _endpos_t_ in
        let _v : (EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) = 
# 447 "src/semantics/extended/parser/eParser.mly"
                                                        ( (fn, t, EType.FldReq) )
# 3613 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = fn;
                MenhirLib.EngineTypes.startp = _startpos_fn_;
                MenhirLib.EngineTypes.endp = _endpos_fn_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let t : (EslSyntax.EType.t) = Obj.magic t in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let fn : (EslSyntax.Id.t) = Obj.magic fn in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fn_ in
        let _endpos = _endpos_t_ in
        let _v : (EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) = 
# 448 "src/semantics/extended/parser/eParser.mly"
                                                        ( (fn, t, EType.FldOpt) )
# 3659 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = fn;
              MenhirLib.EngineTypes.startp = _startpos_fn_;
              MenhirLib.EngineTypes.endp = _endpos_fn_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t : (EslSyntax.EType.t) = Obj.magic t in
        let _2 : unit = Obj.magic _2 in
        let fn : (string EslSyntax.Source.t) = Obj.magic fn in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fn_ in
        let _endpos = _endpos_t_ in
        let _v : (EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) = 
# 449 "src/semantics/extended/parser/eParser.mly"
                                                        ( (fn, t, EType.FldReq) )
# 3698 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let props = 
# 241 "<standard.mly>"
    ( xs )
# 3738 "src/semantics/extended/parser/eParser.ml"
           in
          (
# 444 "src/semantics/extended/parser/eParser.mly"
    ( EParsing_helper.Type.parse_tobject props )
# 3743 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.tobject))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 359 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Neg )
# 3779 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 3788 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 359 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Neg )
# 3824 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 3833 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 360 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.BitwiseNot )
# 3869 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 3878 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 360 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.BitwiseNot )
# 3914 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 3923 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 361 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.LogicalNot )
# 3959 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 3968 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 361 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.LogicalNot )
# 4004 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4013 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 362 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ListHead )
# 4049 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4058 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 362 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ListHead )
# 4094 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4103 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 363 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ListTail )
# 4139 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4148 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 363 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ListTail )
# 4184 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4193 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 364 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Typeof )
# 4229 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4238 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 364 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Typeof )
# 4274 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4283 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 365 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.IntToFloat )
# 4319 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4328 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 365 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.IntToFloat )
# 4364 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4373 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 366 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.IntToString )
# 4409 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4418 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 366 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.IntToString )
# 4454 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4463 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 367 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.FloatToInt )
# 4499 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4508 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 367 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.FloatToInt )
# 4544 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4553 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 368 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.FloatToString )
# 4589 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4598 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 368 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.FloatToString )
# 4634 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4643 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 369 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.StringToInt )
# 4679 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4688 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 369 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.StringToInt )
# 4724 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4733 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 370 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.StringToFloat )
# 4769 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4778 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 370 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.StringToFloat )
# 4814 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4823 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 371 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ObjectToList )
# 4859 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4868 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 371 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ObjectToList )
# 4904 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4913 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 372 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ObjectFields )
# 4949 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 4958 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let op = 
# 372 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ObjectFields )
# 4994 "src/semantics/extended/parser/eParser.ml"
           in
          let _startpos_op_ = _startpos__1_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 296 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.UnOpt (op, e) @> at _sloc )
# 5003 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 375 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Plus )
# 5046 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5054 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 375 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Plus )
# 5097 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5105 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 376 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Minus )
# 5148 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5156 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 376 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Minus )
# 5199 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5207 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 377 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Times )
# 5250 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5258 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 377 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Times )
# 5301 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5309 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 378 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Div )
# 5352 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5360 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 378 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Div )
# 5403 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5411 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 379 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Modulo )
# 5454 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5462 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 379 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Modulo )
# 5505 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5513 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 380 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Pow )
# 5556 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5564 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 380 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Pow )
# 5607 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5615 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 381 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.BitwiseAnd )
# 5658 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5666 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 381 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.BitwiseAnd )
# 5709 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5717 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 382 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.BitwiseOr )
# 5760 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5768 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 382 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.BitwiseOr )
# 5811 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5819 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 383 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.BitwiseXor )
# 5862 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5870 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 383 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.BitwiseXor )
# 5913 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5921 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 384 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ShiftLeft )
# 5964 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 5972 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 384 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ShiftLeft )
# 6015 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6023 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 385 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ShiftRight )
# 6066 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6074 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 385 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ShiftRight )
# 6117 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6125 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 386 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ShiftRightLogical )
# 6168 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6176 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 386 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ShiftRightLogical )
# 6219 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6227 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 387 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.LogicalAnd )
# 6270 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6278 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 387 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.LogicalAnd )
# 6321 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6329 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 388 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.LogicalOr )
# 6372 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6380 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 388 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.LogicalOr )
# 6423 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6431 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 389 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.SCLogicalAnd )
# 6474 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6482 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 389 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.SCLogicalAnd )
# 6525 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6533 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 390 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.SCLogicalOr )
# 6576 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6584 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 390 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.SCLogicalOr )
# 6627 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6635 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 391 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Eq )
# 6678 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6686 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 391 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Eq )
# 6729 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6737 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 392 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Ne )
# 6780 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6788 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 392 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Ne )
# 6831 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6839 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 393 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Lt )
# 6882 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6890 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 393 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Lt )
# 6933 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6941 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 394 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Gt )
# 6984 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 6992 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 394 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Gt )
# 7035 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 7043 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 395 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Le )
# 7086 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 7094 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 395 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Le )
# 7137 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 7145 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 396 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Ge )
# 7188 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 7196 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 396 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.Ge )
# 7239 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 7247 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e2 = no_blocklike_expr_target in
          let _endpos_e2_ = _endpos_no_blocklike_expr_target_ in
          let op = 
# 397 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ObjectMem )
# 7290 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 7298 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e2 = obj_expr_target in
          let _endpos_e2_ = _endpos_obj_expr_target_ in
          let op = 
# 397 "src/semantics/extended/parser/eParser.mly"
                            ( Operator.ObjectMem )
# 7341 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos_e2_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 298 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.BinOpt (op, e1, e2) @> at _sloc )
# 7349 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
              MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
              MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target_inlined1 : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _2 : unit = Obj.magic _2 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_inlined1_ in
        let _v =
          let e3 = no_blocklike_expr_target_inlined1 in
          let _endpos_e3_ = _endpos_no_blocklike_expr_target_inlined1_ in
          let e2 = no_blocklike_expr_target in
          let _endpos = _endpos_e3_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 300 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.TriOpt (Conditional, e1, e2, e3) @> at _sloc )
# 7410 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
              MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
              MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _4 : unit = Obj.magic _4 in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _2 : unit = Obj.magic _2 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e3 = obj_expr_target in
          let _endpos_e3_ = _endpos_obj_expr_target_ in
          let e2 = no_blocklike_expr_target in
          let _endpos = _endpos_e3_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 300 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.TriOpt (Conditional, e1, e2, e3) @> at _sloc )
# 7471 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = obj_expr_target;
              MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
              MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _4 : unit = Obj.magic _4 in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _2 : unit = Obj.magic _2 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e3 = no_blocklike_expr_target in
          let _endpos_e3_ = _endpos_no_blocklike_expr_target_ in
          let e2 = obj_expr_target in
          let _endpos = _endpos_e3_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 300 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.TriOpt (Conditional, e1, e2, e3) @> at _sloc )
# 7532 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = obj_expr_target;
              MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
              MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let obj_expr_target_inlined1 : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _2 : unit = Obj.magic _2 in
        let e1 : (EslSyntax.EExpr.t) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_obj_expr_target_inlined1_ in
        let _v =
          let e3 = obj_expr_target_inlined1 in
          let _endpos_e3_ = _endpos_obj_expr_target_inlined1_ in
          let e2 = obj_expr_target in
          let _endpos = _endpos_e3_ in
          let _symbolstartpos = _startpos_e1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 300 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.TriOpt (Conditional, e1, e2, e3) @> at _sloc )
# 7593 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (EslSyntax.EExpr.t list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let es = 
# 241 "<standard.mly>"
    ( xs )
# 7634 "src/semantics/extended/parser/eParser.ml"
           in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 302 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.NOpt (ListExpr, es) @> at _sloc )
# 7642 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 111 "<standard.mly>"
    ( None )
# 7661 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 114 "<standard.mly>"
    ( Some x )
# 7686 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (EslSyntax.Id.t option) = 
# 111 "<standard.mly>"
    ( None )
# 7704 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.Id.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (EslSyntax.Id.t option) = 
# 114 "<standard.mly>"
    ( Some x )
# 7729 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (EslSyntax.EExpr.t option) = 
# 111 "<standard.mly>"
    ( None )
# 7747 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_no_blocklike_expr_target_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let x = no_blocklike_expr_target in
          (
# 114 "<standard.mly>"
    ( Some x )
# 7774 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_obj_expr_target_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let x = obj_expr_target in
          (
# 114 "<standard.mly>"
    ( Some x )
# 7802 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (EslSyntax.Id.t option) = 
# 111 "<standard.mly>"
    ( None )
# 7821 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.Id.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (EslSyntax.Id.t option) = 
# 114 "<standard.mly>"
    ( Some x )
# 7846 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (EslSyntax.EStmt.t option) = 
# 111 "<standard.mly>"
    ( None )
# 7864 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.EStmt.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (EslSyntax.EStmt.t option) = 
# 114 "<standard.mly>"
    ( Some x )
# 7889 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (EslSyntax.EType.t option) = 
# 111 "<standard.mly>"
    ( None )
# 7907 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.EType.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (EslSyntax.EType.t option) = 
# 114 "<standard.mly>"
    ( Some x )
# 7932 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = pattern_value_target;
          MenhirLib.EngineTypes.startp = _startpos_pattern_value_target_;
          MenhirLib.EngineTypes.endp = _endpos_pattern_value_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = id_target;
              MenhirLib.EngineTypes.startp = _startpos_id_target_;
              MenhirLib.EngineTypes.endp = _endpos_id_target_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let pattern_value_target : (EslSyntax.EPat.PatVal.t' EslSyntax.Source.t) = Obj.magic pattern_value_target in
        let _2 : unit = Obj.magic _2 in
        let id_target : (EslSyntax.Id.t) = Obj.magic id_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_target_ in
        let _endpos = _endpos_pattern_value_target_ in
        let _v : (EslSyntax.Id.t * EslSyntax.EPat.PatVal.t) = (id_target, pattern_value_target) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = pattern_value_target;
          MenhirLib.EngineTypes.startp = _startpos_pattern_value_target_;
          MenhirLib.EngineTypes.endp = _endpos_pattern_value_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = str_id_target;
              MenhirLib.EngineTypes.startp = _startpos_str_id_target_;
              MenhirLib.EngineTypes.endp = _endpos_str_id_target_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let pattern_value_target : (EslSyntax.EPat.PatVal.t' EslSyntax.Source.t) = Obj.magic pattern_value_target in
        let _2 : unit = Obj.magic _2 in
        let str_id_target : (EslSyntax.Id.t) = Obj.magic str_id_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_str_id_target_ in
        let _endpos = _endpos_pattern_value_target_ in
        let _v : (EslSyntax.Id.t * EslSyntax.EPat.PatVal.t) = (str_id_target, pattern_value_target) in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = pbs;
            MenhirLib.EngineTypes.startp = _startpos_pbs_;
            MenhirLib.EngineTypes.endp = _endpos_pbs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let pbs : ((EslSyntax.Id.t * EslSyntax.EPat.PatVal.t) list) = Obj.magic pbs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 255 "src/semantics/extended/parser/eParser.mly"
    ( EPat.ObjPat (pbs) @> at _sloc )
# 8045 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EPat.t' EslSyntax.Source.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 257 "src/semantics/extended/parser/eParser.mly"
    ( EPat.DefaultPat @> at _sloc )
# 8075 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EPat.t' EslSyntax.Source.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.Id.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _endpos = _endpos_x_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 264 "src/semantics/extended/parser/eParser.mly"
                          ( EPat.PatVal.Var x.it @> at _sloc )
# 8105 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EPat.PatVal.t' EslSyntax.Source.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let v : (EslSyntax.Value.t) = Obj.magic v in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_v_ in
        let _endpos = _endpos_v_ in
        let _v =
          let _endpos = _endpos_v_ in
          let _symbolstartpos = _startpos_v_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 265 "src/semantics/extended/parser/eParser.mly"
                          ( EPat.PatVal.Val v @> at _sloc )
# 8135 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EPat.PatVal.t' EslSyntax.Source.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 266 "src/semantics/extended/parser/eParser.mly"
                          ( EPat.PatVal.Val (Value.List []) @> at _sloc )
# 8172 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EPat.PatVal.t' EslSyntax.Source.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 267 "src/semantics/extended/parser/eParser.mly"
                          ( EPat.PatVal.None @> at _sloc )
# 8202 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EPat.PatVal.t' EslSyntax.Source.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = tdef_target;
          MenhirLib.EngineTypes.startp = _startpos_tdef_target_;
          MenhirLib.EngineTypes.endp = _endpos_tdef_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let tdef_target : (EslSyntax.EType.TDef.t) = Obj.magic tdef_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_tdef_target_ in
        let _endpos = _endpos_tdef_target_ in
        let _v : (EslSyntax.EProg.t -> unit) = 
# 125 "src/semantics/extended/parser/eParser.mly"
                          EParsing_helper.Prog.parse_tdef  
# 8228 "src/semantics/extended/parser/eParser.ml"
         tdef_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = macro_target;
          MenhirLib.EngineTypes.startp = _startpos_macro_target_;
          MenhirLib.EngineTypes.endp = _endpos_macro_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let macro_target : (EslSyntax.EMacro.t) = Obj.magic macro_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_macro_target_ in
        let _endpos = _endpos_macro_target_ in
        let _v : (EslSyntax.EProg.t -> unit) = 
# 126 "src/semantics/extended/parser/eParser.mly"
                          EParsing_helper.Prog.parse_macro  
# 8253 "src/semantics/extended/parser/eParser.ml"
         macro_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = func_target;
          MenhirLib.EngineTypes.startp = _startpos_func_target_;
          MenhirLib.EngineTypes.endp = _endpos_func_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let func_target : (EslSyntax.EFunc.t) = Obj.magic func_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_func_target_ in
        let _endpos = _endpos_func_target_ in
        let _v : (EslSyntax.EProg.t -> unit) = 
# 127 "src/semantics/extended/parser/eParser.mly"
                          EParsing_helper.Prog.parse_func  
# 8278 "src/semantics/extended/parser/eParser.ml"
         func_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = advice_target;
          MenhirLib.EngineTypes.startp = _startpos_advice_target_;
          MenhirLib.EngineTypes.endp = _endpos_advice_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let advice_target : (EslSyntax.EAdvice.t) = Obj.magic advice_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_advice_target_ in
        let _endpos = _endpos_advice_target_ in
        let _v : (EslSyntax.EProg.t -> unit) = 
# 128 "src/semantics/extended/parser/eParser.mly"
                          EParsing_helper.Prog.parse_advice  
# 8303 "src/semantics/extended/parser/eParser.ml"
         advice_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = prog_els;
          MenhirLib.EngineTypes.startp = _startpos_prog_els_;
          MenhirLib.EngineTypes.endp = _endpos_prog_els_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = imports;
            MenhirLib.EngineTypes.startp = _startpos_imports_;
            MenhirLib.EngineTypes.endp = _endpos_imports_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let prog_els : ((EslSyntax.EProg.t -> unit) list) = Obj.magic prog_els in
        let imports : (EslSyntax.EImport.t list) = Obj.magic imports in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_imports_ in
        let _endpos = _endpos_prog_els_ in
        let _v : (EslSyntax.EProg.t) = 
# 122 "src/semantics/extended/parser/eParser.mly"
    ( EParsing_helper.Prog.parse_prog imports prog_els )
# 8335 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s1;
          MenhirLib.EngineTypes.startp = _startpos_s1_;
          MenhirLib.EngineTypes.endp = _endpos_s1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let s1 : (EslSyntax.EStmt.t) = Obj.magic s1 in
        let e : (EslSyntax.EExpr.t) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s1_ in
        let _v =
          let _endpos = _endpos_s1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 217 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.If (e, s1, None) @> at _sloc )
# 8378 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s2;
          MenhirLib.EngineTypes.startp = _startpos_s2_;
          MenhirLib.EngineTypes.endp = _endpos_s2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = s1;
              MenhirLib.EngineTypes.startp = _startpos_s1_;
              MenhirLib.EngineTypes.endp = _endpos_s1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let s2 : (EslSyntax.EStmt.t) = Obj.magic s2 in
        let _4 : unit = Obj.magic _4 in
        let s1 : (EslSyntax.EStmt.t) = Obj.magic s1 in
        let e : (EslSyntax.EExpr.t) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s2_ in
        let _v =
          let _endpos = _endpos_s2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 219 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.If (e, s1, Some s2) @> at _sloc )
# 8436 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = dflt;
            MenhirLib.EngineTypes.startp = _startpos_dflt_;
            MenhirLib.EngineTypes.endp = _endpos_dflt_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = css;
              MenhirLib.EngineTypes.startp = _startpos_css_;
              MenhirLib.EngineTypes.endp = _endpos_css_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = e;
                  MenhirLib.EngineTypes.startp = _startpos_e_;
                  MenhirLib.EngineTypes.endp = _endpos_e_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let dflt : (EslSyntax.EStmt.t option) = Obj.magic dflt in
        let css : ((EslSyntax.EExpr.t * EslSyntax.EStmt.t) list) = Obj.magic css in
        let _3 : unit = Obj.magic _3 in
        let e : (EslSyntax.EExpr.t) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 221 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Switch (e, css, dflt) @> at _sloc )
# 8501 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = css;
          MenhirLib.EngineTypes.startp = _startpos_css_;
          MenhirLib.EngineTypes.endp = _endpos_css_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = dsc;
              MenhirLib.EngineTypes.startp = _startpos_dsc_;
              MenhirLib.EngineTypes.endp = _endpos_dsc_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
                MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
                MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let css : ((EslSyntax.EPat.t * EslSyntax.EStmt.t) list) = Obj.magic css in
        let _4 : unit = Obj.magic _4 in
        let dsc : (EslSyntax.Id.t option) = Obj.magic dsc in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_css_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos = _endpos_css_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 223 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.MatchWith (e, dsc, css) @> at _sloc )
# 8560 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = css;
          MenhirLib.EngineTypes.startp = _startpos_css_;
          MenhirLib.EngineTypes.endp = _endpos_css_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = dsc;
              MenhirLib.EngineTypes.startp = _startpos_dsc_;
              MenhirLib.EngineTypes.endp = _endpos_dsc_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = obj_expr_target;
                MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
                MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let css : ((EslSyntax.EPat.t * EslSyntax.EStmt.t) list) = Obj.magic css in
        let _4 : unit = Obj.magic _4 in
        let dsc : (EslSyntax.Id.t option) = Obj.magic dsc in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_css_ in
        let _v =
          let e = obj_expr_target in
          let _endpos = _endpos_css_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 223 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.MatchWith (e, dsc, css) @> at _sloc )
# 8619 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_no_blocklike_expr_target_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let x = no_blocklike_expr_target in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 8647 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_obj_expr_target_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let x = obj_expr_target in
          (
# 250 "<standard.mly>"
    ( [ x ] )
# 8675 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
              MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
              MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (EslSyntax.EExpr.t list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_no_blocklike_expr_target_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x = no_blocklike_expr_target in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 8717 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = obj_expr_target;
              MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
              MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (EslSyntax.EExpr.t list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_obj_expr_target_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x = obj_expr_target in
          (
# 253 "<standard.mly>"
    ( x :: xs )
# 8759 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.Id.t * EslSyntax.EExpr.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((EslSyntax.Id.t * EslSyntax.EExpr.t) list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 8785 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : ((EslSyntax.Id.t * EslSyntax.EExpr.t) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (EslSyntax.Id.t * EslSyntax.EExpr.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : ((EslSyntax.Id.t * EslSyntax.EExpr.t) list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 8824 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.Id.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (EslSyntax.Id.t list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 8849 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (EslSyntax.Id.t list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (EslSyntax.Id.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (EslSyntax.Id.t list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 8888 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 8913 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : ((EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : ((EslSyntax.Id.t * EslSyntax.EType.t * EslSyntax.EType.tfldstyle) list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 8952 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.Id.t * EslSyntax.EPat.PatVal.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((EslSyntax.Id.t * EslSyntax.EPat.PatVal.t) list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 8977 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : ((EslSyntax.Id.t * EslSyntax.EPat.PatVal.t) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (EslSyntax.Id.t * EslSyntax.EPat.PatVal.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : ((EslSyntax.Id.t * EslSyntax.EPat.PatVal.t) list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 9016 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.Id.t * EslSyntax.EType.t option) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((EslSyntax.Id.t * EslSyntax.EType.t option) list) = 
# 250 "<standard.mly>"
    ( [ x ] )
# 9041 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : ((EslSyntax.Id.t * EslSyntax.EType.t option) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (EslSyntax.Id.t * EslSyntax.EType.t option) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : ((EslSyntax.Id.t * EslSyntax.EType.t option) list) = 
# 253 "<standard.mly>"
    ( x :: xs )
# 9080 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = dsc;
                MenhirLib.EngineTypes.startp = _startpos_dsc_;
                MenhirLib.EngineTypes.endp = _endpos_dsc_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let t : (EslSyntax.EType.t) = Obj.magic t in
        let _5 : (unit option) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let dsc : (EslSyntax.Id.t) = Obj.magic dsc in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : (EslSyntax.EType.t') = 
# 461 "src/semantics/extended/parser/eParser.mly"
    ( EType.SigmaType (dsc, (EParsing_helper.Type.parse_tsigma dsc t)) )
# 9140 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = aux_stmt_target;
          MenhirLib.EngineTypes.startp = _startpos_aux_stmt_target_;
          MenhirLib.EngineTypes.endp = _endpos_aux_stmt_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let aux_stmt_target : (EslSyntax.EStmt.t) = Obj.magic aux_stmt_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_aux_stmt_target_ in
        let _endpos = _endpos_aux_stmt_target_ in
        let _v : (EslSyntax.EStmt.t) = aux_stmt_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = expr_stmt_target;
            MenhirLib.EngineTypes.startp = _startpos_expr_stmt_target_;
            MenhirLib.EngineTypes.endp = _endpos_expr_stmt_target_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let expr_stmt_target : (EslSyntax.EStmt.t) = Obj.magic expr_stmt_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_expr_stmt_target_ in
        let _endpos = _endpos__2_ in
        let _v : (EslSyntax.EStmt.t) = expr_stmt_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = exec_stmt_target;
            MenhirLib.EngineTypes.startp = _startpos_exec_stmt_target_;
            MenhirLib.EngineTypes.endp = _endpos_exec_stmt_target_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let exec_stmt_target : (EslSyntax.EStmt.t) = Obj.magic exec_stmt_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_exec_stmt_target_ in
        let _endpos = _endpos__2_ in
        let _v : (EslSyntax.EStmt.t) = exec_stmt_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = update_stmt_target;
            MenhirLib.EngineTypes.startp = _startpos_update_stmt_target_;
            MenhirLib.EngineTypes.endp = _endpos_update_stmt_target_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let update_stmt_target : (EslSyntax.EStmt.t) = Obj.magic update_stmt_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_update_stmt_target_ in
        let _endpos = _endpos__2_ in
        let _v : (EslSyntax.EStmt.t) = update_stmt_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = block_stmt_target;
          MenhirLib.EngineTypes.startp = _startpos_block_stmt_target_;
          MenhirLib.EngineTypes.endp = _endpos_block_stmt_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let block_stmt_target : (EslSyntax.EStmt.t) = Obj.magic block_stmt_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_block_stmt_target_ in
        let _endpos = _endpos_block_stmt_target_ in
        let _v : (EslSyntax.EStmt.t) = block_stmt_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = selection_stmt_target;
          MenhirLib.EngineTypes.startp = _startpos_selection_stmt_target_;
          MenhirLib.EngineTypes.endp = _endpos_selection_stmt_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let selection_stmt_target : (EslSyntax.EStmt.t) = Obj.magic selection_stmt_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_selection_stmt_target_ in
        let _endpos = _endpos_selection_stmt_target_ in
        let _v : (EslSyntax.EStmt.t) = selection_stmt_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = iteration_stmt_target;
          MenhirLib.EngineTypes.startp = _startpos_iteration_stmt_target_;
          MenhirLib.EngineTypes.endp = _endpos_iteration_stmt_target_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let iteration_stmt_target : (EslSyntax.EStmt.t) = Obj.magic iteration_stmt_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_iteration_stmt_target_ in
        let _endpos = _endpos_iteration_stmt_target_ in
        let _v : (EslSyntax.EStmt.t) = iteration_stmt_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 17 "src/semantics/extended/parser/eParser.mly"
       (string)
# 9329 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v =
          let _endpos = _endpos_s_ in
          let _symbolstartpos = _startpos_s_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 344 "src/semantics/extended/parser/eParser.mly"
                                  ( (s @> at _sloc) )
# 9341 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.Id.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = stmt_target;
          MenhirLib.EngineTypes.startp = _startpos_stmt_target_;
          MenhirLib.EngineTypes.endp = _endpos_stmt_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
              MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
              MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let stmt_target : (EslSyntax.EStmt.t) = Obj.magic stmt_target in
        let _3 : unit = Obj.magic _3 in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_stmt_target_ in
        let _v =
          let expr_target = no_blocklike_expr_target in
          ((expr_target, stmt_target) : (EslSyntax.EExpr.t * EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = stmt_target;
          MenhirLib.EngineTypes.startp = _startpos_stmt_target_;
          MenhirLib.EngineTypes.endp = _endpos_stmt_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = obj_expr_target;
              MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
              MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let stmt_target : (EslSyntax.EStmt.t) = Obj.magic stmt_target in
        let _3 : unit = Obj.magic _3 in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_stmt_target_ in
        let _v =
          let expr_target = obj_expr_target in
          ((expr_target, stmt_target) : (EslSyntax.EExpr.t * EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = stmt_target;
          MenhirLib.EngineTypes.startp = _startpos_stmt_target_;
          MenhirLib.EngineTypes.endp = _endpos_stmt_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let stmt_target : (EslSyntax.EStmt.t) = Obj.magic stmt_target in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_stmt_target_ in
        let _v : (EslSyntax.EStmt.t) = stmt_target in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = tv;
            MenhirLib.EngineTypes.startp = _startpos_tv_;
            MenhirLib.EngineTypes.endp = _endpos_tv_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = tn;
                MenhirLib.EngineTypes.startp = _startpos_tn_;
                MenhirLib.EngineTypes.endp = _endpos_tn_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let tv : (EslSyntax.EType.t) = Obj.magic tv in
        let _3 : unit = Obj.magic _3 in
        let tn : (EslSyntax.Id.t) = Obj.magic tn in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (EslSyntax.EType.TDef.t) = 
# 138 "src/semantics/extended/parser/eParser.mly"
    ( EType.TDef.create tn tv )
# 9520 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 346 "src/semantics/extended/parser/eParser.mly"
                                  ( ("*" @> at _sloc) )
# 9549 "src/semantics/extended/parser/eParser.ml"
           : (string EslSyntax.Source.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t2;
          MenhirLib.EngineTypes.startp = _startpos_t2_;
          MenhirLib.EngineTypes.endp = _endpos_t2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t1;
              MenhirLib.EngineTypes.startp = _startpos_t1_;
              MenhirLib.EngineTypes.endp = _endpos_t1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t2 : (EslSyntax.EType.t) = Obj.magic t2 in
        let _2 : unit = Obj.magic _2 in
        let t1 : (EslSyntax.EType.t) = Obj.magic t1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t1_ in
        let _endpos = _endpos_t2_ in
        let _v : (EslSyntax.EType.t list) = 
# 452 "src/semantics/extended/parser/eParser.mly"
                                                        ( [t2 ; t1] )
# 9589 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ts;
              MenhirLib.EngineTypes.startp = _startpos_ts_;
              MenhirLib.EngineTypes.endp = _endpos_ts_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t : (EslSyntax.EType.t) = Obj.magic t in
        let _2 : unit = Obj.magic _2 in
        let ts : (EslSyntax.EType.t list) = Obj.magic ts in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ts_ in
        let _endpos = _endpos_t_ in
        let _v : (EslSyntax.EType.t list) = 
# 453 "src/semantics/extended/parser/eParser.mly"
                                                        ( t :: ts )
# 9628 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let t : (EslSyntax.EType.t) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (EslSyntax.EType.t) = 
# 415 "src/semantics/extended/parser/eParser.mly"
                                          ( t )
# 9667 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 416 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.AnyType @> at _sloc )
# 9696 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 417 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.UnknownType @> at _sloc )
# 9726 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 418 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.NeverType @> at _sloc )
# 9756 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 419 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.UndefinedType @> at _sloc )
# 9786 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 420 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.NullType @> at _sloc )
# 9816 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 421 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.VoidType @> at _sloc )
# 9846 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 422 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.IntType @> at _sloc )
# 9876 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 423 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.FloatType @> at _sloc )
# 9906 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 424 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.StringType @> at _sloc )
# 9936 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 425 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.BooleanType @> at _sloc )
# 9966 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 426 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.SymbolType @> at _sloc )
# 9996 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = lt;
          MenhirLib.EngineTypes.startp = _startpos_lt_;
          MenhirLib.EngineTypes.endp = _endpos_lt_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let lt : (EslSyntax.EType.tliteral) = Obj.magic lt in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_lt_ in
        let _endpos = _endpos_lt_ in
        let _v =
          let _endpos = _endpos_lt_ in
          let _symbolstartpos = _startpos_lt_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 427 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.LiteralType (LitStrong, lt) @> at _sloc )
# 10026 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ot;
          MenhirLib.EngineTypes.startp = _startpos_ot_;
          MenhirLib.EngineTypes.endp = _endpos_ot_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ot : (EslSyntax.EType.tobject) = Obj.magic ot in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ot_ in
        let _endpos = _endpos_ot_ in
        let _v =
          let _endpos = _endpos_ot_ in
          let _symbolstartpos = _startpos_ot_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 428 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.ObjectType ot @> at _sloc )
# 10056 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let t : (EslSyntax.EType.t) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos_t_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 429 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.ListType t @> at _sloc )
# 10100 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (EslSyntax.EType.t list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let ts = 
# 264 "<standard.mly>"
    ( List.rev xs )
# 10127 "src/semantics/extended/parser/eParser.ml"
           in
          let (_endpos_ts_, _startpos_ts_) = (_endpos_xs_, _startpos_xs_) in
          let _endpos = _endpos_ts_ in
          let _symbolstartpos = _startpos_ts_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 430 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.TupleType(ts) @> at _sloc )
# 10136 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (EslSyntax.EType.t list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let ts = 
# 264 "<standard.mly>"
    ( List.rev xs )
# 10163 "src/semantics/extended/parser/eParser.ml"
           in
          let (_endpos_ts_, _startpos_ts_) = (_endpos_xs_, _startpos_xs_) in
          let _endpos = _endpos_ts_ in
          let _symbolstartpos = _startpos_ts_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 431 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.UnionType(ts) @> at _sloc )
# 10172 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let t : (EslSyntax.EType.t') = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t_ in
        let _v =
          let _endpos = _endpos_t_ in
          let _symbolstartpos = _startpos_t_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 432 "src/semantics/extended/parser/eParser.mly"
                                          ( t @> at _sloc )
# 10202 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = tvar;
          MenhirLib.EngineTypes.startp = _startpos_tvar_;
          MenhirLib.EngineTypes.endp = _endpos_tvar_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let tvar : (EslSyntax.Id.t) = Obj.magic tvar in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_tvar_ in
        let _endpos = _endpos_tvar_ in
        let _v =
          let _endpos = _endpos_tvar_ in
          let _symbolstartpos = _startpos_tvar_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 433 "src/semantics/extended/parser/eParser.mly"
                                          ( EType.UserDefinedType tvar.it @> at _sloc )
# 10232 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EType.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = id_target;
            MenhirLib.EngineTypes.startp = _startpos_id_target_;
            MenhirLib.EngineTypes.endp = _endpos_id_target_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (EslSyntax.EType.t option) = Obj.magic _2 in
        let id_target : (EslSyntax.Id.t) = Obj.magic id_target in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_id_target_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _2_1 = _2 in
          ((id_target, _2_1) : (EslSyntax.Id.t * EslSyntax.EType.t option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let t : (EslSyntax.EType.t) = Obj.magic t in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : (EslSyntax.EType.t) = t in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t2;
          MenhirLib.EngineTypes.startp = _startpos_t2_;
          MenhirLib.EngineTypes.endp = _endpos_t2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t1;
              MenhirLib.EngineTypes.startp = _startpos_t1_;
              MenhirLib.EngineTypes.endp = _endpos_t1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t2 : (EslSyntax.EType.t) = Obj.magic t2 in
        let _2 : unit = Obj.magic _2 in
        let t1 : (EslSyntax.EType.t) = Obj.magic t1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t1_ in
        let _endpos = _endpos_t2_ in
        let _v : (EslSyntax.EType.t list) = 
# 456 "src/semantics/extended/parser/eParser.mly"
                                                        ( [t2 ; t1] )
# 10331 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ts;
              MenhirLib.EngineTypes.startp = _startpos_ts_;
              MenhirLib.EngineTypes.endp = _endpos_ts_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t : (EslSyntax.EType.t) = Obj.magic t in
        let _2 : unit = Obj.magic _2 in
        let ts : (EslSyntax.EType.t list) = Obj.magic ts in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ts_ in
        let _endpos = _endpos_t_ in
        let _v : (EslSyntax.EType.t list) = 
# 457 "src/semantics/extended/parser/eParser.mly"
                                                        ( t :: ts )
# 10370 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = id;
              MenhirLib.EngineTypes.startp = _startpos_id_;
              MenhirLib.EngineTypes.endp = _endpos_id_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _3 : unit = Obj.magic _3 in
        let id : (EslSyntax.Id.t) = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let expr = no_blocklike_expr_target in
          let _endpos_expr_ = _endpos_no_blocklike_expr_target_ in
          let _endpos = _endpos_expr_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 196 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Assign (id, None, expr) @> at _sloc )
# 10422 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = id;
              MenhirLib.EngineTypes.startp = _startpos_id_;
              MenhirLib.EngineTypes.endp = _endpos_id_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _3 : unit = Obj.magic _3 in
        let id : (EslSyntax.Id.t) = Obj.magic id in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let expr = obj_expr_target in
          let _endpos_expr_ = _endpos_obj_expr_target_ in
          let _endpos = _endpos_expr_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 196 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Assign (id, None, expr) @> at _sloc )
# 10475 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _2 : unit = Obj.magic _2 in
        let x : (EslSyntax.Id.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 198 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Assign (x, None, e) @> at _sloc )
# 10521 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _2 : unit = Obj.magic _2 in
        let x : (EslSyntax.Id.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 198 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Assign (x, None, e) @> at _sloc )
# 10567 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _2 : unit = Obj.magic _2 in
        let x : (string EslSyntax.Source.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 200 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.GAssign (x, e) @> at _sloc )
# 10613 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _2 : unit = Obj.magic _2 in
        let x : (string EslSyntax.Source.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 200 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.GAssign (x, e) @> at _sloc )
# 10659 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = fe;
              MenhirLib.EngineTypes.startp = _startpos_fe_;
              MenhirLib.EngineTypes.endp = _endpos_fe_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = oe;
                MenhirLib.EngineTypes.startp = _startpos_oe_;
                MenhirLib.EngineTypes.endp = _endpos_oe_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _3 : unit = Obj.magic _3 in
        let fe : (EslSyntax.EExpr.t) = Obj.magic fe in
        let oe : (EslSyntax.EExpr.t) = Obj.magic oe in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_oe_ in
        let _endpos = _endpos_no_blocklike_expr_target_ in
        let _v =
          let e = no_blocklike_expr_target in
          let _endpos_e_ = _endpos_no_blocklike_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_oe_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 202 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.FieldAssign (oe, fe, e) @> at _sloc )
# 10712 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = obj_expr_target;
          MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
          MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = fe;
              MenhirLib.EngineTypes.startp = _startpos_fe_;
              MenhirLib.EngineTypes.endp = _endpos_fe_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = oe;
                MenhirLib.EngineTypes.startp = _startpos_oe_;
                MenhirLib.EngineTypes.endp = _endpos_oe_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _3 : unit = Obj.magic _3 in
        let fe : (EslSyntax.EExpr.t) = Obj.magic fe in
        let oe : (EslSyntax.EExpr.t) = Obj.magic oe in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_oe_ in
        let _endpos = _endpos_obj_expr_target_ in
        let _v =
          let e = obj_expr_target in
          let _endpos_e_ = _endpos_obj_expr_target_ in
          let _endpos = _endpos_e_ in
          let _symbolstartpos = _startpos_oe_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 202 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.FieldAssign (oe, fe, e) @> at _sloc )
# 10765 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = fe;
          MenhirLib.EngineTypes.startp = _startpos_fe_;
          MenhirLib.EngineTypes.endp = _endpos_fe_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = no_blocklike_expr_target;
            MenhirLib.EngineTypes.startp = _startpos_no_blocklike_expr_target_;
            MenhirLib.EngineTypes.endp = _endpos_no_blocklike_expr_target_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let fe : (EslSyntax.EExpr.t) = Obj.magic fe in
        let no_blocklike_expr_target : (EslSyntax.EExpr.t) = Obj.magic no_blocklike_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_fe_ in
        let _v =
          let oe = no_blocklike_expr_target in
          let _endpos = _endpos_fe_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 204 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.FieldDelete (oe, fe) @> at _sloc )
# 10810 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = fe;
          MenhirLib.EngineTypes.startp = _startpos_fe_;
          MenhirLib.EngineTypes.endp = _endpos_fe_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = obj_expr_target;
            MenhirLib.EngineTypes.startp = _startpos_obj_expr_target_;
            MenhirLib.EngineTypes.endp = _endpos_obj_expr_target_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let fe : (EslSyntax.EExpr.t) = Obj.magic fe in
        let obj_expr_target : (EslSyntax.EExpr.t) = Obj.magic obj_expr_target in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_fe_ in
        let _v =
          let oe = obj_expr_target in
          let _endpos = _endpos_fe_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 204 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.FieldDelete (oe, fe) @> at _sloc )
# 10855 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ctxvars;
            MenhirLib.EngineTypes.startp = _startpos_ctxvars_;
            MenhirLib.EngineTypes.endp = _endpos_ctxvars_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = pxs;
              MenhirLib.EngineTypes.startp = _startpos_pxs_;
              MenhirLib.EngineTypes.endp = _endpos_pxs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x;
                    MenhirLib.EngineTypes.startp = _startpos_x_;
                    MenhirLib.EngineTypes.endp = _endpos_x_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let s : (EslSyntax.EStmt.t) = Obj.magic s in
        let ctxvars : (EslSyntax.Id.t list) = Obj.magic ctxvars in
        let pxs : (EslSyntax.Id.t list) = Obj.magic pxs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let x : (EslSyntax.Id.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_s_ in
        let _v =
          let _endpos = _endpos_s_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 207 "src/semantics/extended/parser/eParser.mly"
    ( EStmt.Lambda (x, fresh_lambda_id_gen (), pxs, ctxvars, s) @> at _sloc )
# 10920 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EStmt.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let v : (EslSyntax.Value.t) = Obj.magic v in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_v_ in
        let _endpos = _endpos_v_ in
        let _v =
          let _endpos = _endpos_v_ in
          let _symbolstartpos = _startpos_v_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 284 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.Val v @> at _sloc )
# 10950 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 15 "src/semantics/extended/parser/eParser.mly"
       (int)
# 10972 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (EslSyntax.Value.t) = 
# 349 "src/semantics/extended/parser/eParser.mly"
                           Value.Int  
# 10980 "src/semantics/extended/parser/eParser.ml"
         i in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let f : (
# 16 "src/semantics/extended/parser/eParser.mly"
       (float)
# 11001 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f_ in
        let _v : (EslSyntax.Value.t) = 
# 350 "src/semantics/extended/parser/eParser.mly"
                           Value.Real  
# 11009 "src/semantics/extended/parser/eParser.ml"
         f in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 17 "src/semantics/extended/parser/eParser.mly"
       (string)
# 11030 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (EslSyntax.Value.t) = 
# 351 "src/semantics/extended/parser/eParser.mly"
                           Value.Str  
# 11038 "src/semantics/extended/parser/eParser.ml"
         s in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let b : (
# 18 "src/semantics/extended/parser/eParser.mly"
       (bool)
# 11059 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic b in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_b_ in
        let _endpos = _endpos_b_ in
        let _v : (EslSyntax.Value.t) = 
# 352 "src/semantics/extended/parser/eParser.mly"
                         ( if b then Value.True else Value.False )
# 11067 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 19 "src/semantics/extended/parser/eParser.mly"
       (string)
# 11088 "src/semantics/extended/parser/eParser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (EslSyntax.Value.t) = 
# 353 "src/semantics/extended/parser/eParser.mly"
                         ( Value.App (`Op "symbol", [Value.Str s]))
# 11096 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (EslSyntax.Value.t) = 
# 354 "src/semantics/extended/parser/eParser.mly"
                         ( Value.Nothing )
# 11121 "src/semantics/extended/parser/eParser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (EslSyntax.Id.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _endpos = _endpos_x_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 288 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.Var x.it @> at _sloc )
# 11150 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (string EslSyntax.Source.t) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _endpos = _endpos_x_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 290 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.GVar x.it @> at _sloc )
# 11180 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = fe;
          MenhirLib.EngineTypes.startp = _startpos_fe_;
          MenhirLib.EngineTypes.endp = _endpos_fe_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = oe;
            MenhirLib.EngineTypes.startp = _startpos_oe_;
            MenhirLib.EngineTypes.endp = _endpos_oe_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let fe : (EslSyntax.EExpr.t) = Obj.magic fe in
        let oe : (EslSyntax.EExpr.t) = Obj.magic oe in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_oe_ in
        let _endpos = _endpos_fe_ in
        let _v =
          let _endpos = _endpos_fe_ in
          let _symbolstartpos = _startpos_oe_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 292 "src/semantics/extended/parser/eParser.mly"
    ( EExpr.Lookup (oe, fe) @> at _sloc )
# 11217 "src/semantics/extended/parser/eParser.ml"
           : (EslSyntax.EExpr.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let entry_type_target =
  fun lexer lexbuf : (EslSyntax.EType.t) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 479 lexer lexbuf)

and entry_stmt_target =
  fun lexer lexbuf : (EslSyntax.EStmt.t) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 475 lexer lexbuf)

and entry_prog_target =
  fun lexer lexbuf : (EslSyntax.EProg.t) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 439 lexer lexbuf)

and entry_func_target =
  fun lexer lexbuf : (EslSyntax.EFunc.t) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 200 lexer lexbuf)

and entry_expr_target =
  fun lexer lexbuf : (EslSyntax.EExpr.t) ->
    Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf)

module Incremental = struct
  
  let entry_type_target =
    fun initial_position : (EslSyntax.EType.t) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 479 initial_position)
  
  and entry_stmt_target =
    fun initial_position : (EslSyntax.EStmt.t) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 475 initial_position)
  
  and entry_prog_target =
    fun initial_position : (EslSyntax.EProg.t) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 439 initial_position)
  
  and entry_func_target =
    fun initial_position : (EslSyntax.EFunc.t) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 200 initial_position)
  
  and entry_expr_target =
    fun initial_position : (EslSyntax.EExpr.t) MenhirInterpreter.checkpoint ->
      Obj.magic (MenhirInterpreter.start 0 initial_position)
  
end
